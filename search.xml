<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>83. 删除排序链表中的重复元素(简单)</title>
      <link href="/article/54635.html"/>
      <url>/article/54635.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></p><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p><p><strong>示例 1：</strong></p><p><img src="https://s1.vika.cn/space/2023/03/04/a97b9245e514489ebffc8832e215ef5f" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://s1.vika.cn/space/2023/03/04/4738bff2f76845eeac8cffa61e2454f6" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[0, 300]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>题目数据保证链表已经按升序 <strong>排列</strong></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>第一次写的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* left = head;</span><br><span class="line">        ListNode* right = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left-&gt;val == right-&gt;val) &#123;</span><br><span class="line">                left-&gt;next = right-&gt;next;</span><br><span class="line">                left = right-&gt;next;</span><br><span class="line">                <span class="keyword">if</span> (right-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    right = left-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = left-&gt;next;</span><br><span class="line">                right = right-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>存在 bug，测试用例 <code>[1, 1, 1]</code> 未通过</p><p><img src="https://s1.vika.cn/space/2023/03/04/fe19e24e77d44b6d9005fa32a1847520"></p><p>这里出现的问题在于当两个元素相等时，向后移动 <code>left 指针</code>，而代码中 <code>right 指针</code>有等于 <code>left 指针</code>的下一个指针，这个时候就会造成忽略</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode必刷题 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>203. 移除链表元素(简单)</title>
      <link href="/article/9a8d3ba6.html"/>
      <url>/article/9a8d3ba6.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a></p><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://s1.vika.cn/space/2023/03/03/08623c86c27d4a45aae274a625fce2b8" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>列表中的节点数目在范围 <code>[0, 104]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 50</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>第一次写的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除头结点的 val == val</span></span><br><span class="line">        <span class="keyword">while</span> (head-&gt;val == val &amp; head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* temp = head; <span class="comment">// 临时指针变量接管 头结点</span></span><br><span class="line">            head = head-&gt;next; <span class="comment">// 更改头结点的指向</span></span><br><span class="line">            <span class="keyword">delete</span> temp; <span class="comment">// 删除头结点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要知道被删除结点的上一个结点</span></span><br><span class="line">        ListNode* cur_node = head;</span><br><span class="line">        <span class="keyword">while</span> (cur_node != <span class="literal">nullptr</span> &amp; cur_node-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除非头结点 val == val</span></span><br><span class="line">            <span class="keyword">if</span> (cur_node-&gt;next-&gt;val == val) &#123;</span><br><span class="line">                ListNode* temp = cur_node-&gt;next; <span class="comment">// 临时指针变量接管 非头结点</span></span><br><span class="line">                cur_node-&gt;next = cur_node-&gt;next-&gt;next; <span class="comment">// 被删除结点的前一个结点指向被删除结点的后一个结点</span></span><br><span class="line">                <span class="keyword">delete</span> temp; <span class="comment">// 删除非头结点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不相等的时候 cur_node 向后移动</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cur_node = cur_node-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><strong>bug 分析</strong></p><ul><li><p>第一个 while 循环的条件出现了 bug，我上来就先将 head 结点的数据域调了出来与 val 进行比较，再对 head 进行判空操作，bug 就出现在如果当 head 为空的时候，就是对空指针进行了成员访问，所以要先进行判空操作</p><blockquote><p><em>runtime error: member access within null pointer of type ‘ListNode’</em></p></blockquote><p>解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;val == val) <span class="comment">// 先判断是否为空，如果为空，就不用访问其成员</span></span><br></pre></td></tr></table></figure></li><li><p>第二个 bug 上面已经修复了，就是 <code>&amp;&amp;</code> 和 <code>&amp;</code>，这里应该使用 <code>&amp;&amp;</code></p></li></ul></blockquote><p>修改后的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除头结点的 val == val</span></span><br><span class="line">        <span class="comment">// 先判断头结点是否为空，再判断头结点 val 是否等于 val</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;val == val) &#123;</span><br><span class="line">            ListNode* temp = head; <span class="comment">// 临时指针变量接管 头结点</span></span><br><span class="line">            head = head-&gt;next; <span class="comment">// 更改头结点的指向</span></span><br><span class="line">            <span class="keyword">delete</span> temp; <span class="comment">// 删除头结点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要知道被删除结点的上一个结点</span></span><br><span class="line">        ListNode* cur_node = head;</span><br><span class="line">        <span class="comment">// 先判断当前结点是否为空，再判断下一个结点是否为空</span></span><br><span class="line">        <span class="keyword">while</span> (cur_node != <span class="literal">nullptr</span> &amp;&amp; cur_node-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除非头结点 val == val</span></span><br><span class="line">            <span class="keyword">if</span> (cur_node-&gt;next-&gt;val == val) &#123;</span><br><span class="line">                ListNode* temp = cur_node-&gt;next; <span class="comment">// 临时指针变量接管 非头结点</span></span><br><span class="line">                cur_node-&gt;next = cur_node-&gt;next-&gt;next; <span class="comment">// 被删除结点的前一个结点指向被删除结点的后一个结点</span></span><br><span class="line">                <span class="keyword">delete</span> temp; <span class="comment">// 删除非头结点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不相等的时候 cur_node 向后移动</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cur_node = cur_node-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兔子数列思路与反思</title>
      <link href="/article/45f71455.html"/>
      <url>/article/45f71455.html</url>
      
        <content type="html"><![CDATA[<h3 id="兔子数列思路与反思"><a href="#兔子数列思路与反思" class="headerlink" title="兔子数列思路与反思"></a>兔子数列思路与反思</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兔子数列-数组的方式</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span> || num == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> rabbit_arr[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, index = <span class="number">0</span>; i &lt; (num - <span class="number">1</span>) / <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        rabbit_arr[index++] = rabbit_arr[index++] + rabbit_arr[index--];</span><br><span class="line">        rabbit_arr[index] = rabbit_arr[index - <span class="number">1</span>] + rabbit_arr[++index];</span><br><span class="line">        rabbit_arr[index] = rabbit_arr[index - <span class="number">1</span>] + rabbit_arr[index - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rabbit_arr[num % <span class="number">3</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">Fibonacci</span>(num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兔子数列-数组的方式</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span> || num == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> rabbit_arr[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, index = <span class="number">0</span>; i &lt; (num - <span class="number">1</span>) / <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        rabbit_arr[<span class="number">0</span>] = rabbit_arr[<span class="number">1</span>] + rabbit_arr[<span class="number">2</span>];</span><br><span class="line">        rabbit_arr[<span class="number">1</span>] = rabbit_arr[<span class="number">0</span>] + rabbit_arr[<span class="number">2</span>];</span><br><span class="line">        rabbit_arr[<span class="number">2</span>] = rabbit_arr[<span class="number">0</span>] + rabbit_arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rabbit_arr[(num - <span class="number">1</span>) % <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">Fibonacci</span>(num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>59. 螺旋矩阵 II(中等)</title>
      <link href="/article/5e3ed6f6.html"/>
      <url>/article/5e3ed6f6.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></p><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://s1.vika.cn/space/2023/03/02/dab85a668d614c4386633f7694ae8312" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">1</span>)); <span class="comment">// &#123;&#123;1&#125;&#125;</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;    <span class="comment">// 初始化矩阵的数</span></span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>;   <span class="comment">// 右边界的减少量</span></span><br><span class="line">        <span class="type">int</span> mid = n / <span class="number">2</span>;  <span class="comment">// 为奇数时中间位置</span></span><br><span class="line">        <span class="type">int</span> loop = n / <span class="number">2</span>; <span class="comment">// 循环次数</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; <span class="comment">// 循环体内的循环变量</span></span><br><span class="line">        <span class="type">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>; <span class="comment">// 每一圈的起点位置</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">while</span> (loop--) &#123;</span><br><span class="line">            i = startx;</span><br><span class="line">            j = starty;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟上行 从左到右</span></span><br><span class="line">            <span class="keyword">for</span> (j = starty; j &lt; n - offset; ++j) &#123;</span><br><span class="line">                v[startx][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟右列 从上到下</span></span><br><span class="line">            <span class="keyword">for</span> (i = startx; i &lt; n - offset; ++i) &#123;</span><br><span class="line">                v[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟下行 从右到左</span></span><br><span class="line">            <span class="keyword">for</span> (; j &gt; starty; --j) &#123;</span><br><span class="line">                v[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟左列 从下到上</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; startx; --i) &#123;</span><br><span class="line">                v[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调整起始位置</span></span><br><span class="line">            ++startx;</span><br><span class="line">            ++starty;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调整右边界</span></span><br><span class="line">            ++offset;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// n 为奇数</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">            v[mid][mid] = count; <span class="comment">// count 在上面循环中最后一次已经自增了一次</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>350. 两个数组的交集 II(简单)</title>
      <link href="/article/2f4f76e7.html"/>
      <url>/article/2f4f76e7.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays-ii/">350. 两个数组的交集 II</a></p><p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><p>**<em>*进阶*<em>：</em></em></p><ul><li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li><li>如果 <code>nums1</code> 的大小比 <code>nums2</code> 小，哪种方法更优？</li><li>如果 <code>nums2</code> 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>第一次写的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>; left &lt; nums1.<span class="built_in">size</span>(); ++left) &#123;</span><br><span class="line">            <span class="keyword">if</span> (right == nums2.<span class="built_in">size</span>()) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums1[left] == nums2[right]) v.<span class="built_in">push_back</span>(nums2[right++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>运用的双指针，左指针随着循环移动，固定右指针也就是<code>nums2</code>的下标，满足条件的时候存放数据加移动右指针，当<code>nums2</code>越界后退出循环。</p><blockquote><p><strong>bug 分析</strong></p><ol><li><p>当<code>nums2</code>的长度大于<code>nums1</code>长度的时候，当不满足条件的时候，移动的是<code>nums1</code>的下标，<code>num2</code>下标不移动，循环就会结束了。</p><p><img src="https://s1.vika.cn/space/2023/02/27/a603d50975d5456983104c4caad39bdd" alt="2023-02-27_19-28-09"></p><p>解决办法：指针移动不使用 for 进行调整双指针，满足相等条件指针同时向右移动，不满足条件时，小的指针那一边进行向后移动。</p><p><img src="https://s1.vika.cn/space/2023/02/27/6ee8f222ccbe4cffb1c4b241b3db23e8" alt="2023-02-27_19-38-21"></p></li><li><p><code>nums1</code> 和 <code>nums2</code>不是有序</p><p><img src="https://s1.vika.cn/space/2023/02/27/6f6442118a684062b68bb56fc6ddf9ae" alt="2023-02-27_20-00-12"></p><p>双指针一直向右跑，导致左边的一些交集的值被忽略。</p><p>所以在使用双指针之前需要排序</p><p><img src="https://s1.vika.cn/space/2023/02/27/19f5c1bdec0d43eb91a008ff2d9e5e7f" alt="2023-02-27_20-07-29"></p></li></ol></blockquote><p>修改后的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> index1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index1 &lt; nums1.<span class="built_in">size</span>() &amp;&amp; index2 &lt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[index1] == nums2[index2]) &#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(nums1[index1++]);</span><br><span class="line">                ++index2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums1[index1] &lt; nums2[index2]) &#123;</span><br><span class="line">                ++index1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums1[index1] &gt; nums2[index2]) &#123;</span><br><span class="line">                ++index2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/27/5990406466064231abff2039a9d9d158" alt="2023-02-27_20-12-07"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 语法</title>
      <link href="/article/a378bd8e.html"/>
      <url>/article/a378bd8e.html</url>
      
        <content type="html"><![CDATA[<h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><blockquote><p>在代码中可以被写下来的固定的值，称为<code>字面量</code></p></blockquote><table><thead><tr><th align="left">类型</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td align="left">数字（Number）</td><td>- 整数（int）<br />- 浮点数（float）<br />- 复数（complex）<br />- 布尔（bool）</td><td>整数：1、0、2<br />浮点数：1.10、2.21<br />复数：1+2j，以 j 结尾<br />布尔：true 为 1 、false 为 0</td></tr><tr><td align="left">字符串（string）</td><td>描述文本的一种数据类型</td><td>任意数量字符组成<br />“teststringcase”</td></tr><tr><td align="left">列表（List）</td><td>有序的可变序列</td><td>有序记录数据</td></tr><tr><td align="left">元组（Tuple）</td><td>有序的不可变序列</td><td>记录不可变的数据集合</td></tr><tr><td align="left">集合（set）</td><td>无序不重复集合</td><td>不重复的数据集合</td></tr><tr><td align="left">字典（Dictionary）</td><td>无序键值对集合</td><td>可无需记录键值对数据集合</td></tr></tbody></table><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里写多行注释</span></span><br><span class="line"><span class="string">这里写多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试注释案例&quot;</span>) <span class="comment"># 这里写单行注释</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>变量名称 = 变量的值</code></p><p>print 输出数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;内容1&quot;</span>, <span class="string">&quot;内容2&quot;</span>, <span class="string">&quot;内容3&quot;</span>) <span class="comment"># 用逗号分隔</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//对变量进行修改</span><br><span class="line"></span><br><span class="line">// test.cpp</span><br><span class="line">int value = 100;</span><br><span class="line">value -= 10;</span><br><span class="line">std::cout &lt;&lt; value &lt;&lt; std::endl; // value == 90</span><br><span class="line"></span><br><span class="line">// test.py</span><br><span class="line">value = 100</span><br><span class="line">value -= 10</span><br><span class="line">print(value) # value == 90</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>() <span class="comment"># 查看数据类型，括号里写数据</span></span><br></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int(x)</td><td align="center">转化为 int</td></tr><tr><td align="center">float(x)</td><td align="center">转化为 float</td></tr><tr><td align="center">str(x)</td><td align="center">转化为 string</td></tr><tr><td align="center">complex(x)</td><td align="center">转化为复数类型</td></tr><tr><td align="center">complex(x, y)</td><td align="center">转化为一个复数类型，x为实数，y为虚数</td></tr></tbody></table><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><blockquote><p>编程的老生常谈问题</p></blockquote><ul><li>变量名</li><li>方法名</li><li>类名</li></ul><p>这些名称需要用标识符去命名</p><p>标识符规则</p><ul><li><p>内容限定</p><ol><li>数字（不能以数字开头</li><li>字母</li><li>下划线</li><li>中文（不建议</li></ol></li><li><p>大小写区分</p></li><li><p>关键字不能使用</p></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>算数运算符</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td align="center">…</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">…</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">…</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td><td align="center">…</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">取整除</td><td align="center">3 &#x2F;&#x2F; 2 结果 1、3.0 &#x2F;&#x2F; 2.0 结果 1.0</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">…</td></tr><tr><td align="center">**</td><td align="center">指数</td><td align="center">2 ** 10 结果 1024</td></tr></tbody></table><ul><li>赋值运算符</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">赋值运算符</td></tr></tbody></table><ul><li>复合赋值运算符</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">+&#x3D;</td><td align="center">加法赋值运算符</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减法赋值运算符</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘法赋值运算符</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除法赋值运算符</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取模赋值运算符</td></tr><tr><td align="center">**&#x3D;</td><td align="center">幂赋值运算符</td></tr><tr><td align="center">&#x2F;&#x2F;&#x3D;</td><td align="center">取整除赋值运算符</td></tr></tbody></table><h3 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><h4 id="字符串的三种定义"><a href="#字符串的三种定义" class="headerlink" title="字符串的三种定义"></a>字符串的三种定义</h4><ol><li>单引号定义法：word &#x3D; ‘helloworld’</li><li>双引号定义法：word &#x3D; “helloworld”</li><li>三引号定义法：word &#x3D; “””helloworld”””</li></ol><p>三引号不用变量去接受就是注释，用变量接受后就是字符串</p><h4 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h4><p>通过加号运算符进行拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;world&quot;</span></span><br><span class="line">str3 = str1 + str2 <span class="comment"># helloworld</span></span><br></pre></td></tr></table></figure><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>方法1：使用 %s</p><p>字符串和变量完成拼接，使用 %s</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">10</span></span><br><span class="line">message = <span class="string">&quot;stringmessage %s&quot;</span> % number</span><br><span class="line"><span class="built_in">print</span>(message) <span class="comment"># stringmessage 10</span></span><br></pre></td></tr></table></figure><p><code>%占位符 %变量</code> </p><p>占位符种类</p><ul><li>int (%d)</li><li>float (%f)</li><li>string (%s)</li></ul><p>方法2：</p><blockquote><p>通过语法：<code>f&quot;内容&#123;变量&#125;&quot;</code> 的格式快速格式化，f 和 双引号之间不要有空格</p><ul><li>不在意类型时</li><li>无精度要求时</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;A&quot;</span></span><br><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;姓名:<span class="subst">&#123;name&#125;</span>年龄:<span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="格式化精度控制"><a href="#格式化精度控制" class="headerlink" title="格式化精度控制"></a>格式化精度控制</h4><p>使用辅助符号 <code>m、n</code> 来控制数据的宽度和精度</p><ul><li>m 控制宽度，要求是数字（很少使用），设置的宽度小于原本的宽度，则无效</li><li>.n，控制小数点精度，要求是数字，会进行<code>四舍五入</code></li></ul><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%5d&quot;</span> % number) <span class="comment"># [空格][空格][空格]10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % number) <span class="comment"># 10.00</span></span><br></pre></td></tr></table></figure><h4 id="表达式进行格式化"><a href="#表达式进行格式化" class="headerlink" title="表达式进行格式化"></a>表达式进行格式化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.1 * 1.1 = %.2f&quot;</span> % (<span class="number">1.1</span> * <span class="number">1.1</span>))  <span class="comment"># 1.21</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1.1 * 1.1 = <span class="subst">&#123;<span class="number">1.1</span> * <span class="number">1.1</span>&#125;</span>&quot;</span>)  <span class="comment"># 1.2100000000000002</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类型名: %s&quot;</span> % <span class="built_in">type</span>(<span class="string">&quot;测试&quot;</span>))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h3><p>input 函数</p><p>从键盘获取输入，使用一个变量接受数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_number = <span class="built_in">input</span>()  <span class="comment"># 获取键盘输出的值</span></span><br><span class="line"><span class="built_in">print</span>(get_number)  <span class="comment"># 键盘获取的值</span></span><br></pre></td></tr></table></figure><p>输入的数据都会是 字符串 类型</p><p>想要变成其他类型需要进行类型转换</p><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><blockquote><p> &#x3D;&#x3D;、!&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;</p></blockquote><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line"><span class="comment"># 执行内容(注意缩进)</span></span><br></pre></td></tr></table></figure><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line"><span class="comment"># 执行内容</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># 执行内容</span></span><br></pre></td></tr></table></figure><h4 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if elif else"></a>if elif else</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line"><span class="comment"># 执行内容</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line"><span class="comment"># 执行内容</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line"><span class="comment"># 执行内容</span></span><br><span class="line"><span class="keyword">else</span> 条件<span class="number">4</span>:</span><br><span class="line"><span class="comment"># 执行内容</span></span><br></pre></td></tr></table></figure><h4 id="判断语句嵌套"><a href="#判断语句嵌套" class="headerlink" title="判断语句嵌套"></a>判断语句嵌套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line"><span class="comment"># 执行代码</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line"><span class="comment"># 执行代码</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># 执行代码</span></span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line"><span class="comment"># 执行代码</span></span><br><span class="line">    <span class="comment"># 条件操作</span></span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列类型:</span><br><span class="line"><span class="comment"># 执行代码</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">str1 = <span class="string">&quot;codecase&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(c) <span class="comment"># c\no\nd\ne\nc\na\ns\ne\n</span></span><br></pre></td></tr></table></figure><h4 id="range-语句"><a href="#range-语句" class="headerlink" title="range 语句"></a>range 语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(num)</span><br></pre></td></tr></table></figure><p>获取一个从 <code>0</code> 开始，到 <code>num - 1</code> 结束的数字序列</p><p><code>range(5)</code> 数据为 [0,1,2,3,4]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(num1, num2)</span><br></pre></td></tr></table></figure><p>获取一个从 <code>num1</code> 开始，到 <code>num2 - 1</code> 结束的数字序列</p><p><code>range(2, 4)</code> 数据为 [2,3]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(num1, num2, step)</span><br></pre></td></tr></table></figure><p>获取一个从 <code>num1</code> 开始，到 <code>num2 - 1</code>结束的数字序列</p><p>step 表示步长，默认为 1，上面的 <code>-1</code> 就是 <code>-step</code></p><p><code>range(3, 9, 3)</code> 数据为 [3, 6]</p><p>配合 for 使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>): <span class="comment"># 相当于 for (int i = 0; i &lt; 10; i += 2)</span></span><br><span class="line"><span class="comment"># 执行代码</span></span><br></pre></td></tr></table></figure><h4 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h4><p>break 直接结束循环</p><p>continue 结束本次循环，开始下一次循环</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">传入参数</span>):</span><br><span class="line"><span class="comment"># 函数体</span></span><br><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><h4 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AddTwoNumber</span>(<span class="params">val1, val2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;val1&#125;</span> + <span class="subst">&#123;val2&#125;</span> = <span class="subst">&#123;val1 + val2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的调用</span></span><br><span class="line">AddTwoNumber(<span class="number">10</span>, <span class="number">20</span>) <span class="comment"># 30</span></span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">AddTwoNumber</span>(<span class="params">val1, val2</span>):</span><br><span class="line">    <span class="keyword">return</span> val1 + val2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(AddTwoNumber(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment"># 30</span></span><br></pre></td></tr></table></figure><h4 id="None-类型"><a href="#None-类型" class="headerlink" title="None 类型"></a>None 类型</h4><blockquote><p>Python 中有一个特别的字面量：None 类型：&lt;class ‘NoneType’&gt;</p><p>没有返回值的函数实际上返回的是这个字面量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line">test_ret = test()</span><br><span class="line"><span class="built_in">print</span>(test_ret) <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test_ret)) <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>None 表示空，在逻辑上表示假</p><h4 id="说明文档"><a href="#说明文档" class="headerlink" title="说明文档"></a>说明文档</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">:param a: 形参 a 的说明</span></span><br><span class="line"><span class="string">:param b: 形参 b 的说明</span></span><br><span class="line"><span class="string">:return: 返回值的说明</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 函数体</span></span><br><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><h3 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h3><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字面量</span></span><br><span class="line">[元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素<span class="number">3</span>, 元素<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">变量名称 = [元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素<span class="number">3</span>, 元素<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空列表</span></span><br><span class="line">变量名称 = []</span><br><span class="line">变量名称 = <span class="built_in">list</span>()</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">direction_key = [<span class="string">&quot;up&quot;</span>, <span class="string">&quot;down&quot;</span>, <span class="string">&quot;left&quot;</span>, <span class="string">&quot;right&quot;</span>] <span class="comment"># [&#x27;up&#x27;, &#x27;down&#x27;, &#x27;left&#x27;, &#x27;right&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(direction_key, <span class="string">&quot;\n&quot;</span>, <span class="built_in">type</span>(direction_key)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>列表中存储的数据类型是<code>不受限制</code>的</p><p>嵌套测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number_list = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>]] <span class="comment"># [[1,3,4], [3,5,8]]</span></span><br><span class="line"><span class="built_in">print</span>(number_list, <span class="string">&quot;\n&quot;</span>, <span class="built_in">type</span>(number_list)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>列表索引</p><h5 id="下标索引"><a href="#下标索引" class="headerlink" title="下标索引"></a>下标索引</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number_list = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(number_list[<span class="number">0</span>][<span class="number">0</span>], number_list[<span class="number">1</span>][<span class="number">1</span>]) <span class="comment"># 1 5</span></span><br></pre></td></tr></table></figure><h5 id="下标反向索引"><a href="#下标反向索引" class="headerlink" title="下标反向索引"></a>下标反向索引</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number_list = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(number_list[-<span class="number">1</span>][-<span class="number">1</span>]) <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(number_list[-<span class="number">2</span>][-<span class="number">1</span>]) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h5 id="列表常见操作方法"><a href="#列表常见操作方法" class="headerlink" title="列表常见操作方法"></a>列表常见操作方法</h5><h6 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h6><p>功能：查找指定元素在列表的下标，找不到就报错 <code>ValueError</code></p><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(number_list.index(<span class="number">3</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(number_list.index(<span class="number">4</span>))  <span class="comment"># ValueError</span></span><br></pre></td></tr></table></figure><h6 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h6><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number_list = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">number_list[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">number_list[-<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(number_list) <span class="comment"># [0, 1, 5]</span></span><br></pre></td></tr></table></figure><h6 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h6><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">number_list.insert(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 下标 1 的位置上插入 2</span></span><br><span class="line"><span class="built_in">print</span>(number_list) <span class="comment"># [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h6 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h6><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追加单个元素</span></span><br><span class="line">number_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">number_list.append(<span class="number">4</span>) <span class="comment"># 结尾加上 4</span></span><br><span class="line"><span class="built_in">print</span>(number_list) <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># 追加其他数据容器</span></span><br><span class="line">number_list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">number_list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">number_list1.extend(number_list2) <span class="comment"># number_list1 后追加 number_list2</span></span><br><span class="line"><span class="built_in">print</span>(number_list1) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment"># number_list1.extend([7, 8, 9])</span></span><br><span class="line"><span class="comment"># print(number_list1) # [1, 2, 3, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h6 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h6><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">number_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> number_list[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(number_list) <span class="comment"># [1, 3, 4, 5, 6] </span></span><br><span class="line"></span><br><span class="line">number_list.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(number_list) <span class="comment"># [1, 3, 4, 6] </span></span><br></pre></td></tr></table></figure><h6 id="删除某一元素在列表中的第一个匹配项"><a href="#删除某一元素在列表中的第一个匹配项" class="headerlink" title="删除某一元素在列表中的第一个匹配项"></a>删除某一元素在列表中的第一个匹配项</h6><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">number_list.remove(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(number_list) <span class="comment"># [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h6 id="清空列表内容"><a href="#清空列表内容" class="headerlink" title="清空列表内容"></a>清空列表内容</h6><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">number_list.clear()</span><br><span class="line"><span class="built_in">print</span>(number_list) <span class="comment"># []</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下Python环境安装</title>
      <link href="/article/88c3d0c4.html"/>
      <url>/article/88c3d0c4.html</url>
      
        <content type="html"><![CDATA[<p>下载安装包 <a href="https://www.python.org/">Welcome to Python.org</a></p><p><img src="https://s1.vika.cn/space/2023/02/13/a5ac9b8d6d144e0fb11c720885daa844" alt="2023-02-13_09-51-24"></p><p>勾选 <code>Add python.exe to PATH</code>，不勾选这个需要在系统环境变量中去配置。</p><p>选择 <code>Customize installation</code> 自定义安装，然后 <code>Next</code></p><p><img src="https://s1.vika.cn/space/2023/02/13/dc676eed59e3424ebee4f798fb54a66a" alt="2023-02-13_09-54-20"></p><p>修改安装路径</p><p><img src="https://s1.vika.cn/space/2023/02/13/1212b850c9bc4cdbbae4c82fa4cdafe8" alt="2023-02-13_10-00-36"></p><p>最后 <code>install</code> 安装</p><p><img src="https://s1.vika.cn/space/2023/02/13/f3dec09415214939a94dd630e433ab98" alt="2023-02-13_10-02-28"></p><p>完成后选择 <code>Disable path length limit</code></p><p>检查安装是否成功，在 <code>cmd</code> 窗口输入 <code>python</code>，出现以下结果，即为安装完成。</p><p><img src="https://s1.vika.cn/space/2023/02/13/7f30f99e26a84fa8bb0ce82ebb511e0e" alt="2023-02-13_10-04-46"></p><p>vscode 配置 Python 环境</p><ul><li>打开VScode安装 <code>Python</code> 插件安装完毕后重启VScode</li><li>在 VsCode 中新建文件后缀名为 <code>.py</code> </li><li>控制台是外部还是内部，可以通过 launch.json 文件进行调整，在左侧菜单栏，选择 <code>运行和调试</code>点击 <code>创建launch.json</code> 文件，点击 <code>python file</code>，将文件中的 <code>&quot;console&quot;</code> 的值 <code>integratedTerminal</code> 换成 <code>externalTerminal</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈C++命名规范</title>
      <link href="/article/1c6fe11c.html"/>
      <url>/article/1c6fe11c.html</url>
      
        <content type="html"><![CDATA[<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><blockquote><p>良好的命名规范可以让程序源码更具有可读性，在程序出现 <code>bug</code> 时更容易找到问题所在。</p><p>对于很多人来说给函数、变量、常量命名无非是是件很痛苦的事。</p><p>一个合格的程序员给自己的程序代码命名的时候不会全部都是 a、b、c一类的，就好比一个正常的人不会给自己的孩子起名为<code>张三</code>、<code>李四</code>等。</p><p>命名要有描述性，让别人能够读懂，而不是只有自己能看懂（<del>时间久了自己都不知道了</del></p><p>目前流行命名规则</p><ul><li><a href="https://baike.baidu.com/item/%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95/7560610#2_1">小驼峰</a>  <code>int myAge;</code> </li><li><a href="https://baike.baidu.com/item/%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95/7560610#2_2">大驼峰</a>  <code>int MyAge;</code> </li><li>下划线  <code>int my_age; </code> 常见 Python 与 Linux 下 C&#x2F;C++ 开发</li><li><a href="https://baike.baidu.com/item/%E5%8C%88%E7%89%99%E5%88%A9%E5%91%BD%E5%90%8D%E6%B3%95/7632397">匈牙利</a>  <code>int iMyAge;</code> 常见于 Windows 下 C&#x2F;C++ 开发，这个便于查看变量类型，但是现在的编译器做的都比较好，鼠标停留在上面就知道类型了</li></ul></blockquote><h3 id="文件命名规范"><a href="#文件命名规范" class="headerlink" title="文件命名规范"></a>文件命名规范</h3><p>比如写的 .cpp、.h 等</p><p>这些文件尽量用小写，多个单词可以用<code>下划线</code>（_）或者 <code>连字符</code>（-）连接，不应缩写，下划线比较通用。</p><blockquote><p>文件名采用 <code>下划线命名法</code></p></blockquote><h3 id="类型命名规范"><a href="#类型命名规范" class="headerlink" title="类型命名规范"></a>类型命名规范</h3><p>类型包括 </p><ul><li>类 class TestCase {};</li><li>结构体 struct TestCase {};</li><li>类型定义 typedef std::map&lt;int, int&gt; IntMap;</li><li>using 别名 using IntMap &#x3D; std::map&lt;int, int&gt;;</li><li>枚举类型 enum EnumColor {};</li><li>类型模板参数 template&lt;class NameType, class AgeType&gt;</li></ul><blockquote><p>类型采用 <code>大驼峰命名法</code></p></blockquote><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><p>变量（包括函数参数）和数据成员名<code>一律小写</code>，单词之间可以下划线(_)连接，类的成员变量以下划线结尾，但结构体不需要以下划线结尾。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> userage = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> user_age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CheckUserAge</span><span class="params">(<span class="type">int</span> user_age)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClassTest</span> &#123;</span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">    <span class="type">int</span> temp_value_;</span><br><span class="line">    <span class="type">int</span> tempvalue_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span>* next_node;</span><br><span class="line">    <span class="type">int</span>* previousnode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>类变量名采用 <code>下划线命名法加结尾下划线</code> or <code>结尾下划线法</code></p><p>结构体变量名采用 <code>下划线命名法</code> or <code>全部小写</code></p></blockquote><h3 id="常量命名规范"><a href="#常量命名规范" class="headerlink" title="常量命名规范"></a>常量命名规范</h3><p>被声明为 <code>const</code>、<code>constexpr</code>的变量，或者在程序运行期间始终不变的，命名时以 <code>k</code> 开头。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> kDaysInAWeek = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><blockquote><p>常量采用 <code>k</code> + <code>大驼峰命名法</code></p></blockquote><h3 id="函数命名规范"><a href="#函数命名规范" class="headerlink" title="函数命名规范"></a>函数命名规范</h3><p>函数采用 <code>大驼峰命名法</code></p><p>函数命名需要可以从函数名中知道你在这个函数里做到什么操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">GetUserName</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举变量命名规范"><a href="#枚举变量命名规范" class="headerlink" title="枚举变量命名规范"></a>枚举变量命名规范</h3><p>枚举的值都是常量，所以也应遵守常量命名规范。</p><ol><li><p><code>k</code> + <code>大驼峰</code></p></li><li><p><code>宏的方式</code>（全是大写加下划线</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">RainbowColor</span> &#123;</span><br><span class="line">    kRed = <span class="number">1</span>,</span><br><span class="line">    kOrange = <span class="number">2</span>,</span><br><span class="line">    kYellow = <span class="number">3</span>,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名空间命名规范"><a href="#命名空间命名规范" class="headerlink" title="命名空间命名规范"></a>命名空间命名规范</h3><blockquote><p><code>大驼峰命名法</code></p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><blockquote><p>无论你用哪种命名方法，归根到底还是要通俗易懂，见名知意。</p><p>这些命名规则都可能会被淘汰，但是这种原则是一直都存在的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命名规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1604.警告一小时内使用相同员工卡大于等于三次的人(中等)</title>
      <link href="/article/73006677.html"/>
      <url>/article/73006677.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="1604-警告一小时内使用相同员工卡大于等于三次的人"><a href="#1604-警告一小时内使用相同员工卡大于等于三次的人" class="headerlink" title="1604. 警告一小时内使用相同员工卡大于等于三次的人"></a><a href="https://leetcode.cn/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period/">1604. 警告一小时内使用相同员工卡大于等于三次的人</a></h4><p>力扣公司的员工都使用员工卡来开办公室的门。每当一个员工使用一次他的员工卡，安保系统会记录下员工的名字和使用时间。如果一个员工在一小时时间内使用员工卡的次数大于等于三次，这个系统会自动发布一个 <strong>警告</strong> 。</p><p>给你字符串数组 <code>keyName</code> 和 <code>keyTime</code> ，其中 <code>[keyName[i], keyTime[i]]</code> 对应一个人的名字和他在 <strong>某一天</strong> 内使用员工卡的时间。</p><p>使用时间的格式是 <strong>24小时制</strong> ，形如 <strong>“HH:MM”</strong> ，比方说 <code>&quot;23:51&quot;</code> 和 <code>&quot;09:49&quot;</code> 。</p><p>请你返回去重后的收到系统警告的员工名字，将它们按 <strong>字典序****升序</strong> 排序后返回。</p><p>请注意 <code>&quot;10:00&quot;</code> - <code>&quot;11:00&quot;</code> 视为一个小时时间范围内，而 <code>&quot;23:51&quot;</code> - <code>&quot;00:10&quot;</code> 不被视为一小时内，因为系统记录的是某一天内的使用情况。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：keyName = [&quot;daniel&quot;,&quot;daniel&quot;,&quot;daniel&quot;,&quot;luis&quot;,&quot;luis&quot;,&quot;luis&quot;,&quot;luis&quot;], keyTime = [&quot;10:00&quot;,&quot;10:40&quot;,&quot;11:00&quot;,&quot;09:00&quot;,&quot;11:00&quot;,&quot;13:00&quot;,&quot;15:00&quot;]</span><br><span class="line">输出：[&quot;daniel&quot;]</span><br><span class="line">解释：&quot;daniel&quot; 在一小时内使用了 3 次员工卡（&quot;10:00&quot;，&quot;10:40&quot;，&quot;11:00&quot;）。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：keyName = [&quot;alice&quot;,&quot;alice&quot;,&quot;alice&quot;,&quot;bob&quot;,&quot;bob&quot;,&quot;bob&quot;,&quot;bob&quot;], keyTime = [&quot;12:01&quot;,&quot;12:00&quot;,&quot;18:00&quot;,&quot;21:00&quot;,&quot;21:20&quot;,&quot;21:30&quot;,&quot;23:00&quot;]</span><br><span class="line">输出：[&quot;bob&quot;]</span><br><span class="line">解释：&quot;bob&quot; 在一小时内使用了 3 次员工卡（&quot;21:00&quot;，&quot;21:20&quot;，&quot;21:30&quot;）。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：keyName = [&quot;john&quot;,&quot;john&quot;,&quot;john&quot;], keyTime = [&quot;23:58&quot;,&quot;23:59&quot;,&quot;00:01&quot;]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：keyName = [&quot;leslie&quot;,&quot;leslie&quot;,&quot;leslie&quot;,&quot;clare&quot;,&quot;clare&quot;,&quot;clare&quot;,&quot;clare&quot;], keyTime = [&quot;13:00&quot;,&quot;13:20&quot;,&quot;14:00&quot;,&quot;18:00&quot;,&quot;18:51&quot;,&quot;19:30&quot;,&quot;19:49&quot;]</span><br><span class="line">输出：[&quot;clare&quot;,&quot;leslie&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= keyName.length, keyTime.length &lt;= 105</code></li><li><code>keyName.length == keyTime.length</code></li><li><code>keyTime</code> 格式为 <strong>“HH:MM”</strong> 。</li><li>保证 <code>[keyName[i], keyTime[i]]</code> 形成的二元对 <strong>互不相同</strong> 。</li><li><code>1 &lt;= keyName[i].length &lt;= 10</code></li><li><code>keyName[i]</code> 只包含小写英文字母。</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 转换时间</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">convert</span><span class="params">(string time)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> minues = (time[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (time[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">// 小时</span></span><br><span class="line">        <span class="type">int</span> second = (time[<span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (time[<span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">// 分钟</span></span><br><span class="line">        <span class="keyword">return</span> minues * <span class="number">60</span> + second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()); <span class="comment">// 排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">// 每三个的第一个和最后一个进行比较</span></span><br><span class="line">            <span class="keyword">if</span> (v[i] - v[i - <span class="number">2</span>] &lt;= <span class="number">60</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">alertNames</span><span class="params">(vector&lt;string&gt;&amp; keyName, vector&lt;string&gt;&amp; keyTime)</span> </span>&#123;</span><br><span class="line">        map&lt;string, vector&lt;<span class="type">int</span>&gt;&gt; map; <span class="comment">// map 排序</span></span><br><span class="line">        vector&lt;string&gt; ret; <span class="comment">// 返回容器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; keyName.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            string name = keyName[i]; <span class="comment">// 记录姓名</span></span><br><span class="line">            string time = keyTime[i]; <span class="comment">// 记录时间</span></span><br><span class="line">            map[name].<span class="built_in">push_back</span>(<span class="built_in">convert</span>(time)); <span class="comment">// 转换好的时间放到 map 容器中</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; KeyVal : map) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judge</span>(KeyVal.second)) &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(KeyVal.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode</title>
      <link href="/article/e2c5bfe8.html"/>
      <url>/article/e2c5bfe8.html</url>
      
        <content type="html"><![CDATA[<ul><li>setting.json 文件（这里有 Code Runner 插件、Error Lens 插件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;iostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stdlib.h&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;array&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;atomic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.tcc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;clocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstdarg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstddef&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstdint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstdio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstdlib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwchar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deque&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;unordered_map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;algorithm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;memory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;memory_resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;optional&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;string_view&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;system_error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tuple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type_traits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;utility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fstream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;initializer_list&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iosfwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;istream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;limits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;new&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sstream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stdexcept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;streambuf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;typeinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;chrono&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cmath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ctime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ratio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;thread&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;unordered_set&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.vcFormat.newLine.beforeOpenBrace.block&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sameLine&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.vcFormat.newLine.beforeOpenBrace.function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sameLine&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sameLine&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sameLine&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.vcFormat.newLine.beforeOpenBrace.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sameLine&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;utf8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript.format.placeOpenBraceOnNewLineForFunctions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript.format.placeOpenBraceOnNewLineForControlBlocks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 插件 error lens </span></span><br><span class="line">    <span class="attr">&quot;errorLens.gutterIconsEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//在行号的左边显示小错误图标</span></span><br><span class="line">    <span class="attr">&quot;errorLens.fontStyleItalic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//使错误信息的字体为斜体</span></span><br><span class="line">    <span class="comment">// 插件 runner</span></span><br><span class="line">    <span class="attr">&quot;code-runner.runInTerminal&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//在控制台运行代码，防止乱码和不能输入</span></span><br><span class="line">    <span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot; cls &amp;&amp; cd /d $dir &amp;&amp; node $fullFileName &amp;&amp; pause&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;python&quot;</span><span class="punctuation">:</span> <span class="string">&quot; cls &amp;&amp; cd /d $dir &amp;&amp; \&quot;$pythonPath\&quot; -u $fullFileName &amp;&amp; pause&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bat&quot;</span><span class="punctuation">:</span> <span class="string">&quot; cls &amp;&amp; cd /d $dir &amp;&amp; $fullFileName&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cls &amp;&amp; cd $dir &amp;&amp; g++ -std=c++11 $fileName -o a.exe &amp;&amp; ./a.exe&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.saveFileBeforeRun&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//运行前自动保存</span></span><br><span class="line">    <span class="attr">&quot;code-runner.customCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot; cls&quot;</span><span class="punctuation">,</span> <span class="comment">//这使Ctrl+Alt+K这个快捷键可以快速清空控制台内容</span></span><br><span class="line">    <span class="attr">&quot;code-runner.respectShebang&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//Windows系统所以不需要按shebang来运行</span></span><br><span class="line">    <span class="attr">&quot;code-runner.ignoreSelection&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//禁用“运行选中部分的代码”功能</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Obsidian 有感</title>
      <link href="/article/1cd98177.html"/>
      <url>/article/1cd98177.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是使用了 Obsidian 将近一个月之后的感想。</p><p>对于这 Markdown 编辑器这方面，我觉的 Obsidian 做到十分优秀，并且其本身还是开源的，但是经过这段时间使用 ，我发现使用 Obsidian 记笔记并不适合我，尽管他在很多方面十分的优秀，但是在我手上他已经不再是一个让我写作的工具了。</p><h3 id="Obsidian-的优势"><a href="#Obsidian-的优势" class="headerlink" title="Obsidian 的优势"></a>Obsidian 的优势</h3><h5 id="功能齐全"><a href="#功能齐全" class="headerlink" title="功能齐全"></a>功能齐全</h5><p>作为一款 Markdown 编辑器，其本身该有的功能都有具备，左侧文章集合，右侧文章目录，这点比 Typora 复合式的文件和大纲要显得方便，很多快捷键可以自定义，而 Typora 修改起来相对麻烦，当然 Obsidian 也不光如此，甚至可以进行网页浏览，给界面加个时间、日历等，我觉这已经完全不是一个编辑器应做的。</p><h5 id="插件丰富"><a href="#插件丰富" class="headerlink" title="插件丰富"></a>插件丰富</h5><p>Obsidian 提供（不算提供）了大量的插件工具，其本身就是通过插件出名的，对于使用功能与工作效率方面上得到了很大的改善和提升，甚至有不少人在做相关插件的介绍与推荐。</p><h5 id="强大的出链和回链"><a href="#强大的出链和回链" class="headerlink" title="强大的出链和回链"></a>强大的出链和回链</h5><p>这个功能是找到当前文章所提到的文章和提到当前文章的文章，看起来好绕，其实就是我在这面文章里写到了哪篇文章，哪篇文章里提到了我这篇文章，对于知识的链接汇总有很大帮助。</p><h5 id="图谱"><a href="#图谱" class="headerlink" title="图谱"></a>图谱</h5><p>其实我觉这个功能真的没啥用，但是也是一大特色吧￣へ￣</p><p>在一个球形图谱去看关系找联系还不如刀了我(* ￣︿￣)</p><h3 id="Obsidian-的弊端"><a href="#Obsidian-的弊端" class="headerlink" title="Obsidian 的弊端"></a>Obsidian 的弊端</h3><h5 id="无法直接打开md文件"><a href="#无法直接打开md文件" class="headerlink" title="无法直接打开md文件"></a>无法直接打开md文件</h5><p>Obsidian 无法直接打开 md 文件，他就好比 <code>vscode</code> 一样，需要放到一个文件夹中，也就是一个库中，这就导致在打开 md 文件的时候必须创建一个文件夹的方式打开，而且里面还会有 Obsidian 原本的配置文件，我在写博客的时候这个配置文件就要让我多好几步去排除上传和以及备份。在库中打开这是他的一个致命弱点，但这也是没有办法，因为它本身有很多的依赖，提到依赖下面还有其相关的弊端。</p><h5 id="依赖无法共享"><a href="#依赖无法共享" class="headerlink" title="依赖无法共享"></a>依赖无法共享</h5><p>Obsidian 的依赖是放在当前存放 md 文件夹的库中的，这就导致，我在一个库中把所有设置全部完善好了，等后面再换一个库，结果就是一切重来，这里包括 自定义CSS、主题 、设置 以及 插件 等。如果想变成上一个库那样，你就需要用上一个库中的配置文件替换掉当前库的配置文件，或者重新设置…</p><h5 id="格式上不够美观"><a href="#格式上不够美观" class="headerlink" title="格式上不够美观"></a>格式上不够美观</h5><p>Obsidian 也是所见即所得的 Markdown 编辑器，但他并没有 Typora 的格式美观。</p><p>打个比方，Obsidian 的回车只有单行（也可以按两下(￣﹏￣；)），而 Typora 在这面却做到很好，不光是两个回车来作段落的区分，而且段内行间距也把控的很好，在文字较多的时候看着清晰明了，不至于眼花缭乱。</p><p>这个其实是可以通过 CSS 调整的，但是！我是来记笔记的不是来学 CSS 的，不是来调试的找问题的，这个过程很容易走火入魔，最后还发现很多 CSS 应用到全局的时候 编辑模式 和 阅读模式 两个模式下显示的不一样，还要分开写 CSS。</p><h5 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h5><p>Obsidian 的很多功能实现，换一个软件打开效果可能就没了，这就意味着你想要看到想要的效果，就必须一直使用 Obsidian，迁移是一个很麻烦的过程。</p><h5 id="分散精力"><a href="#分散精力" class="headerlink" title="分散精力"></a>分散精力</h5><p>由于 Obsidian 提供了太多的功能，导致原先的写作热情全部变成了<strong>折腾</strong>的热情了。</p><p>当然这点弊端可能是在<strong>我个人</strong>身上发生的，但不能保证没有像我一样的人，想写笔记，但又喜欢折腾的人。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>这篇文章是用 Typora 写的，Obsidian 成也 插件 败也 插件。</p><p>最后我觉的 Obsidian 功能多、插件多、主题多，实则离简洁易用的 Markdown 编辑器越来越远，使用他的这个个月里，什么都可以自定义，遇到问题找插件，主题也可以自己写或者下载，折腾了很久，最后发现还是没有原先就为你准备好的 Typora 好用。想写内容没写多少，CSS 倒是精进了不少。</p><p>最后的最后，Obsidian 很漂亮、很优雅，但是！我会使用 Typora，不为别的，只为效率。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2325. 解密消息(简单)</title>
      <link href="/article/a7357e06.html"/>
      <url>/article/a7357e06.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="2325-解密消息"><a href="#2325-解密消息" class="headerlink" title="2325. 解密消息"></a><a href="https://leetcode.cn/problems/decode-the-message/">2325. 解密消息</a></h4><p>给你字符串 <code>key</code> 和 <code>message</code> ，分别表示一个加密密钥和一段加密消息。解密 <code>message</code> 的步骤如下：</p><ol><li>使用 <code>key</code> 中 26 个英文小写字母第一次出现的顺序作为替换表中的字母 <strong>顺序</strong> 。</li><li>将替换表与普通英文字母表对齐，形成对照表。</li><li>按照对照表 <strong>替换</strong> <code>message</code> 中的每个字母。</li><li>空格 <code>&#39; &#39;</code> 保持不变。</li></ol><ul><li>例如，<code>key = &quot;***hap***p***y*** ***bo***y&quot;</code>（实际的加密密钥会包含字母表中每个字母 <strong>至少一次</strong>），据此，可以得到部分对照表（<code>&#39;h&#39; -&gt; &#39;a&#39;</code>、<code>&#39;a&#39; -&gt; &#39;b&#39;</code>、<code>&#39;p&#39; -&gt; &#39;c&#39;</code>、<code>&#39;y&#39; -&gt; &#39;d&#39;</code>、<code>&#39;b&#39; -&gt; &#39;e&#39;</code>、<code>&#39;o&#39; -&gt; &#39;f&#39;</code>）。</li></ul><p>返回解密后的消息。</p><p><strong>示例 1：</strong></p><p><img src="https://s1.vika.cn/space/2023/02/01/1627ff0495bf44ce82ae5e008bde4676" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：key = &quot;the quick brown fox jumps over the lazy dog&quot;, message = &quot;vkbs bs t suepuv&quot;</span><br><span class="line">输出：&quot;this is a secret&quot;</span><br><span class="line">解释：对照表如上图所示。</span><br><span class="line">提取 &quot;the quick brown fox jumps over the lazy dog&quot; 中每个字母的首次出现可以得到替换表。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://s1.vika.cn/space/2023/02/01/0349ccd7a0c54f99bac479821a3114c6" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：key = &quot;eljuxhpwnyrdgtqkviszcfmabo&quot;, message = &quot;zwx hnfx lqantp mnoeius ycgk vcnjrdb&quot;</span><br><span class="line">输出：&quot;the five boxing wizards jump quickly&quot;</span><br><span class="line">解释：对照表如上图所示。</span><br><span class="line">提取 &quot;eljuxhpwnyrdgtqkviszcfmabo&quot; 中每个字母的首次出现可以得到替换表。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>26 &lt;= key.length &lt;= 2000</code></li><li><code>key</code> 由小写英文字母及 <code>&#39; &#39;</code> 组成</li><li><code>key</code> 包含英文字母表中每个字符（<code>&#39;a&#39;</code> 到 <code>&#39;z&#39;</code>）<strong>至少一次</strong></li><li><code>1 &lt;= message.length &lt;= 2000</code></li><li><code>message</code> 由小写英文字母和 <code>&#39; &#39;</code> 组成</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">decodeMessage</span><span class="params">(string key, string message)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt; rules;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : key) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; rules.<span class="built_in">count</span>(c) == <span class="number">0</span>) &#123;</span><br><span class="line">                rules[c] = a;</span><br><span class="line">                ++a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>&amp; c : message) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                c = rules[c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2319. 判断矩阵是否是一个 X 矩阵(简单)</title>
      <link href="/article/1e8c5a8.html"/>
      <url>/article/1e8c5a8.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="2319-判断矩阵是否是一个-X-矩阵"><a href="#2319-判断矩阵是否是一个-X-矩阵" class="headerlink" title="2319. 判断矩阵是否是一个 X 矩阵"></a><a href="https://leetcode.cn/problems/check-if-matrix-is-x-matrix/">2319. 判断矩阵是否是一个 X 矩阵</a></h4><p>如果一个正方形矩阵满足下述 <strong>全部</strong> 条件，则称之为一个 <strong>X 矩阵</strong> ：</p><ol><li>矩阵对角线上的所有元素都 <strong>不是 0</strong></li><li>矩阵中所有其他元素都是 <strong>0</strong></li></ol><p>给你一个大小为 <code>n x n</code> 的二维整数数组 <code>grid</code> ，表示一个正方形矩阵。如果 <code>grid</code> 是一个 <strong>X 矩阵</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/31/89b824ce848342eaa4993f1ced40c884"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]</span><br><span class="line">输出：true</span><br><span class="line">解释：矩阵如上图所示。</span><br><span class="line">X 矩阵应该满足：绿色元素（对角线上）都不是 0 ，红色元素都是 0 。</span><br><span class="line">因此，grid 是一个 X 矩阵。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/31/bd3ddddaef554a4ca2c461752da25b8c"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[5,7,0],[0,3,1],[0,5,0]]</span><br><span class="line">输出：false</span><br><span class="line">解释：矩阵如上图所示。</span><br><span class="line">X 矩阵应该满足：绿色元素（对角线上）都不是 0 ，红色元素都是 0 。</span><br><span class="line">因此，grid 不是一个 X 矩阵。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == grid.length == grid[i].length</code></li><li><code>3 &lt;= n &lt;= 100</code></li><li><code>0 &lt;= grid[i][j] &lt;= 105</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>题目比较简单，考察的点就是对角线的表达，对角线上不等于 0 ，不在对角线上等于 0 ，返回 true，否则返回 false 即可。</p><p><img src="https://s1.vika.cn/space/2023/01/31/bf368d01ed2e4358b15dbe616d0dc729"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkXMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> girdLength = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; girdLength; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; girdLength; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j || i + j + <span class="number">1</span> == girdLength) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!grid[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (grid[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1669.合并两个链表(中等)</title>
      <link href="/article/54f169cc.html"/>
      <url>/article/54f169cc.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="1669-合并两个链表"><a href="#1669-合并两个链表" class="headerlink" title="1669. 合并两个链表"></a><a href="https://leetcode.cn/problems/merge-in-between-linked-lists/">1669. 合并两个链表</a></h4><p>给你两个链表 <code>list1</code> 和 <code>list2</code> ，它们包含的元素分别为 <code>n</code> 个和 <code>m</code> 个。</p><p>请你将 <code>list1</code> 中下标从 <code>a</code> 到 <code>b</code> 的全部节点都删除，并将<code>list2</code> 接在被删除节点的位置。</p><p>下图中蓝色边和节点展示了操作后的结果：</p><p><img src="https://s1.vika.cn/space/2023/01/30/1b7b8a52656a4c878e9b9d81217805a6"></p><p>请你返回结果链表的头指针。</p><p><strong>示例 1：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/30/e50d3b7e81ce46e690634c03f1a7f900"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]</span><br><span class="line">输出：[0,1,2,1000000,1000001,1000002,5]</span><br><span class="line">解释：我们删除 list1 中下标为 3 和 4 的两个节点，并将 list2 接在该位置。上图中蓝色的边和节点为答案链表。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/30/e05dbfd577f24536992cead19624e729"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]</span><br><span class="line">输出：[0,1,1000000,1000001,1000002,1000003,1000004,6]</span><br><span class="line">解释：上图中蓝色的边和节点为答案链表。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= list1.length &lt;= 104</code></li><li><code>1 &lt;= a &lt;= b &lt; list1.length - 1</code></li><li><code>1 &lt;= list2.length &lt;= 104</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeInBetween</span><span class="params">(ListNode* list1, <span class="type">int</span> a, <span class="type">int</span> b, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode* nodeA = list1;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a - <span class="number">1</span>; ++i)</span><br><span class="line">            nodeA = nodeA-&gt;next;</span><br><span class="line"></span><br><span class="line">        ListNode* nodeB = nodeA-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b - a + <span class="number">1</span>; ++i)</span><br><span class="line">            nodeB = nodeB-&gt;next;</span><br><span class="line"></span><br><span class="line">        nodeA-&gt;next = list2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (;list2-&gt;next != <span class="literal">nullptr</span>; list2 = list2-&gt;next);</span><br><span class="line"></span><br><span class="line">        list2-&gt;next = nodeB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2315. 统计星号(简单)</title>
      <link href="/article/111ae7aa.html"/>
      <url>/article/111ae7aa.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="2315-统计星号"><a href="#2315-统计星号" class="headerlink" title="2315. 统计星号"></a><a href="https://leetcode.cn/problems/count-asterisks/">2315. 统计星号</a></h4><p>给你一个字符串 <code>s</code> ，每 <strong>两个</strong> 连续竖线 <code>&#39;|&#39;</code> 为 <strong>一对</strong> 。换言之，第一个和第二个 <code>&#39;|&#39;</code> 为一对，第三个和第四个 <code>&#39;|&#39;</code> 为一对，以此类推。</p><p>请你返回 <strong>不在</strong> 竖线对之间，<code>s</code> 中 <code>&#39;*&#39;</code> 的数目。</p><p><strong>注意</strong>，每个竖线 <code>&#39;|&#39;</code> 都会 <strong>恰好</strong> 属于一个对。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;l|*e*et|c**o|*de|&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：不在竖线对之间的字符加粗加斜体后，得到字符串：&quot;l|*e*et|c**o|*de|&quot; 。</span><br><span class="line">第一和第二条竖线 &#x27;|&#x27; 之间的字符不计入答案。</span><br><span class="line">同时，第三条和第四条竖线 &#x27;|&#x27; 之间的字符也不计入答案。</span><br><span class="line">不在竖线对之间总共有 2 个星号，所以我们返回 2 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;iamprogrammer&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：在这个例子中，s 中没有星号。所以返回 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;yo|uar|e**|b|e***au|tifu|l&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：需要考虑的字符加粗加斜体后：&quot;yo|uar|e**|b|e***au|tifu|l&quot; 。不在竖线对之间总共有 5 个星号。所以我们返回 5 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 只包含小写英文字母，竖线 <code>&#39;|&#39;</code> 和星号 <code>&#39;*&#39;</code> 。</li><li><code>s</code> 包含 <strong>偶数</strong> 个竖线 <code>&#39;|&#39;</code> 。</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="1、暴力解法"><a href="#1、暴力解法" class="headerlink" title="1、暴力解法"></a>1、暴力解法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countAsterisks</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> flag, num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;|&#x27;</span>) ++flag;</span><br><span class="line">            <span class="keyword">if</span> (flag % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; s[i] == <span class="string">&#x27;*&#x27;</span>) ++num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="C-指针方法"><a href="#C-指针方法" class="headerlink" title="C 指针方法"></a>C 指针方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">countAsterisks</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>,flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; *s != <span class="string">&#x27;\0&#x27;</span>; ++s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*s == <span class="string">&#x27;|&#x27;</span>) ++flag;</span><br><span class="line">        <span class="keyword">if</span> (flag % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; *s == <span class="string">&#x27;*&#x27;</span>) ++num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2309. 兼具大小写的最好英文字母(简单)</title>
      <link href="/article/dd4bbbc8.html"/>
      <url>/article/dd4bbbc8.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="2309-兼具大小写的最好英文字母"><a href="#2309-兼具大小写的最好英文字母" class="headerlink" title="2309. 兼具大小写的最好英文字母"></a><a href="https://leetcode.cn/problems/greatest-english-letter-in-upper-and-lower-case/">2309. 兼具大小写的最好英文字母</a></h4><p>给你一个由英文字母组成的字符串 <code>s</code> ，请你找出并返回 <code>s</code> 中的 <strong>最好</strong> 英文字母。返回的字母必须为大写形式。如果不存在满足条件的字母，则返回一个空字符串。</p><p><strong>最好</strong> 英文字母的大写和小写形式必须 <strong>都</strong> 在 <code>s</code> 中出现。</p><p>英文字母 <code>b</code> 比另一个英文字母 <code>a</code> <strong>更好</strong> 的前提是：英文字母表中，<code>b</code> 在 <code>a</code> 之 <strong>后</strong> 出现。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：s = &quot;lEeTcOdE&quot;</span><br><span class="line">&gt;输出：&quot;E&quot;</span><br><span class="line">&gt;解释：</span><br><span class="line">&gt;字母 &#x27;E&#x27; 是唯一一个大写和小写形式都出现的字母。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：s = &quot;arRAzFif&quot;</span><br><span class="line">&gt;输出：&quot;R&quot;</span><br><span class="line">&gt;解释：</span><br><span class="line">&gt;字母 &#x27;R&#x27; 是大写和小写形式都出现的最好英文字母。</span><br><span class="line">&gt;注意 &#x27;A&#x27; 和 &#x27;F&#x27; 的大写和小写形式也都出现了，但是 &#x27;R&#x27; 比 &#x27;F&#x27; 和 &#x27;A&#x27; 更好。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：s = &quot;AbCdEfGhIjK&quot;</span><br><span class="line">&gt;输出：&quot;&quot;</span><br><span class="line">&gt;解释：</span><br><span class="line">&gt;不存在大写和小写形式都出现的字母。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 由小写和大写英文字母组成</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">greatestLetter</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">char</span>&gt; <span class="title">hash</span><span class="params">(s.begin(), s.end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">25</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash.<span class="built_in">count</span>(<span class="string">&#x27;a&#x27;</span> + i) &gt; <span class="number">0</span> &amp;&amp; hash.<span class="built_in">count</span>(<span class="string">&#x27;A&#x27;</span> + i) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>704.二分查找(简单)</title>
      <link href="/article/749fe85e.html"/>
      <url>/article/749fe85e.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></p><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol></blockquote><p><strong>二分查找的使用条件</strong></p><ul><li>首先这个序列必须是<strong>有序的</strong></li><li>这个序列<strong>无重复</strong>的元素（重复元素会导致返回下标不统一</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode必刷题 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27. 移除元素(简单)</title>
      <link href="/article/de85b68f.html"/>
      <url>/article/de85b68f.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></p><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line"> print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> fast = <span class="number">0</span>; fast &lt; nums.<span class="built_in">size</span>(); fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val != nums[fast]) &#123;</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode必刷题 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>977. 有序数组的平方(简单)</title>
      <link href="/article/f93f9cdd.html"/>
      <url>/article/f93f9cdd.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></p><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li></ul><p><strong>进阶：</strong></p><ul><li>请你设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> index = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret_v</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] * nums[left] &gt; nums[right] * nums[right]) &#123;</span><br><span class="line">                ret_v[index--] = nums[left] * nums[left];</span><br><span class="line">                left++; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ret_v[index--] = nums[right] * nums[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret_v; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode必刷题 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>209. 长度最小的子数组(中等)</title>
      <link href="/article/244009ff.html"/>
      <url>/article/244009ff.html</url>
      
        <content type="html"><![CDATA[<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><blockquote><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></p><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 109</code></li><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret_len = INT32_MAX; <span class="comment">// 窗口长度返回值</span></span><br><span class="line">        <span class="type">int</span> sub_len = <span class="number">0</span>; <span class="comment">// 窗口长度</span></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 窗口和</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">// 窗口的左边界</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            sum += nums[i]; <span class="comment">// 计算窗口的和</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                sub_len = i - j + <span class="number">1</span>; <span class="comment">// 更新窗口长度</span></span><br><span class="line">                ret_len = ret_len &gt; sub_len ? sub_len : ret_len; <span class="comment">// 更新返回值</span></span><br><span class="line">                sum -= nums[j]; <span class="comment">//  更新窗口的和</span></span><br><span class="line">                ++j; <span class="comment">// 更新窗口左边界</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret_len == INT32_MAX ? <span class="number">0</span> : ret_len; <span class="comment">// 窗口没有调整的时候需要返回 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode必刷题 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>876. 链表的中间结点(简单)</title>
      <link href="/article/23908.html"/>
      <url>/article/23908.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h4><p>给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5]</span><br><span class="line">输出：此列表中的结点 3 (序列化形式：[3,4,5])</span><br><span class="line">返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。</span><br><span class="line">注意，我们返回了一个 ListNode 类型的对象 ans，这样：</span><br><span class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5,6]</span><br><span class="line">输出：此列表中的结点 4 (序列化形式：[4,5,6])</span><br><span class="line">由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>给定链表的结点数介于 <code>1</code> 和 <code>100</code> 之间。</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* currentNode = head;</span><br><span class="line">        <span class="type">int</span> listLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; currentNode != <span class="literal">nullptr</span>; currentNode = currentNode-&gt;next)&#123;</span><br><span class="line">            ++listLength;</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listLength / <span class="number">2</span>; i++)&#123;</span><br><span class="line">            currentNode = currentNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h4><p>快慢指针</p><p>使用双指针，<code>指针1</code>每次移动两个指针大小，<code>指针2</code>每次移动一个指针大小，<code>指针1</code>到 <code>nullptr</code>之后 <code>指针2</code>就在中间的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* fastPtr = head;</span><br><span class="line">        ListNode* slowPtr = head;</span><br><span class="line">        <span class="keyword">while</span> (fastPtr != <span class="literal">nullptr</span> &amp;&amp; fastPtr-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            fastPtr = fastPtr-&gt;next-&gt;next;</span><br><span class="line">            slowPtr = slowPtr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowPtr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1664. 生成平衡数组的方案数(中等)</title>
      <link href="/article/24712d21.html"/>
      <url>/article/24712d21.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="1664-生成平衡数组的方案数"><a href="#1664-生成平衡数组的方案数" class="headerlink" title="1664. 生成平衡数组的方案数"></a><a href="https://leetcode.cn/problems/ways-to-make-a-fair-array/">1664. 生成平衡数组的方案数</a></h4><p>给你一个整数数组 <code>nums</code> 。你需要选择 <strong>恰好</strong> 一个下标（下标从 <strong>0</strong> 开始）并删除对应的元素。请注意剩下元素的下标可能会因为删除操作而发生改变。</p><p>比方说，如果 <code>nums = [6,1,7,4,1]</code> ，那么：</p><ul><li>选择删除下标 <code>1</code> ，剩下的数组为 <code>nums = [6,7,4,1]</code> 。</li><li>选择删除下标 <code>2</code> ，剩下的数组为 <code>nums = [6,1,4,1]</code> 。</li><li>选择删除下标 <code>4</code> ，剩下的数组为 <code>nums = [6,1,7,4]</code> 。</li></ul><p>如果一个数组满足奇数下标元素的和与偶数下标元素的和相等，该数组就是一个 <strong>平衡数组</strong> 。</p><p>请你返回删除操作后，剩下的数组 <code>nums</code> 是 <strong>平衡数组</strong> 的 <strong>方案数</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,1,6,4]</span><br><span class="line">输出：1</span><br><span class="line">解释：</span><br><span class="line">删除下标 0 ：[1,6,4] -&gt; 偶数元素下标为：1 + 4 = 5 。奇数元素下标为：6 。不平衡。</span><br><span class="line">删除下标 1 ：[2,6,4] -&gt; 偶数元素下标为：2 + 4 = 6 。奇数元素下标为：6 。平衡。</span><br><span class="line">删除下标 2 ：[2,1,4] -&gt; 偶数元素下标为：2 + 4 = 6 。奇数元素下标为：1 。不平衡。</span><br><span class="line">删除下标 3 ：[2,1,6] -&gt; 偶数元素下标为：2 + 6 = 8 。奇数元素下标为：1 。不平衡。</span><br><span class="line">只有一种让剩余数组成为平衡数组的方案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：你可以删除任意元素，剩余数组都是平衡数组。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：0</span><br><span class="line">解释：不管删除哪个元素，剩下数组都不是平衡数组。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="1、暴力解法"><a href="#1、暴力解法" class="headerlink" title="1、暴力解法"></a>1、暴力解法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">waysToMakeFair</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v = nums;</span><br><span class="line">            v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>() + i);</span><br><span class="line">            <span class="type">int</span> length = v.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> sum1 =<span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) sum1 += v[j];</span><br><span class="line">                <span class="keyword">else</span> sum2 += v[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum1 == sum2) ++num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>hhh 直接超时了</p></blockquote><h4 id="2、动态规划"><a href="#2、动态规划" class="headerlink" title="2、动态规划"></a>2、动态规划</h4>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1480. 一维数组的动态和(简单)</title>
      <link href="/article/45719.html"/>
      <url>/article/45719.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>新年第一道题，找个简单的(¬_¬ )</p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="1480-一维数组的动态和"><a href="#1480-一维数组的动态和" class="headerlink" title="1480. 一维数组的动态和"></a><a href="https://leetcode.cn/problems/running-sum-of-1d-array/">1480. 一维数组的动态和</a></h4><p>给你一个数组 <code>nums</code> 。数组「动态和」的计算公式为：<code>runningSum[i] = sum(nums[0]…nums[i])</code> 。</p><p>请返回 <code>nums</code> 的动态和。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：nums = [1,2,3,4]</span><br><span class="line">&gt;输出：[1,3,6,10]</span><br><span class="line">&gt;解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：nums = [1,1,1,1,1]</span><br><span class="line">&gt;输出：[1,2,3,4,5]</span><br><span class="line">&gt;解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：nums = [3,1,2,10,1]</span><br><span class="line">&gt;输出：[3,4,6,16,17]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>-10^6 &lt;= nums[i] &lt;= 10^6</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h4><p>所求数组的每一位是所给数组的这个位置前面的数字（包括当前位置）累加的和</p><p>新建一个数组，用一个整形去存放累加和，放到新数组，这样数据多的时候比较耗内存，但是只用遍历一次，空间换时间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">runningSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), sum = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>; <span class="comment">// 初始化 n 个空间</span></span><br><span class="line">        sum = v[<span class="number">0</span>] = nums[<span class="number">0</span>]; <span class="comment">// 第一个数是不变的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum += nums[i]; <span class="comment">// 累加</span></span><br><span class="line">            v[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h4><p>上面的方法在如果给定数组长度很长，这样的做法是很费空间的，其实也可以写成单个数组的形式，直接在已给数组上进行操作</p><ul><li>index(1) &#x3D; index(1) + index(0)</li><li>index(2) &#x3D; index(2) + index(1)</li><li>index(3) &#x3D; index(3) + index(2)</li></ul><p>有点递归的感觉</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">runningSum1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">            nums[i] += nums[i - <span class="number">1</span>]; <span class="comment">// 相加的结果之后进行累加</span></span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26. 删除有序数组中的重复项(简单)</title>
      <link href="/article/4154.html"/>
      <url>/article/4154.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h4><p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 <code>k</code> 个元素，那么 <code>nums</code> 的前 <code>k</code> 个元素应该保存最终结果。</p><p>将最终结果插入 <code>nums</code> 的前 <code>k</code> 个位置后返回 <code>k</code> 。</p><p>不要使用额外的空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // 调用</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>升序</strong> 排列</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="1、暴力解法"><a href="#1、暴力解法" class="headerlink" title="1、暴力解法"></a>1、暴力解法</h4><p>题目要求在原数组上进行修改，不能使用新空间去存储</p><p>下面是第一次写代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>]) </span><br><span class="line">                nums.<span class="built_in">erase</span>(nums.<span class="built_in">begin</span>()+i);</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调用的类方法去做，然而案例2都没过去</p><blockquote><p>案例2：[0,0,1,1,1,2,2,3,3,4]</p><p>结果：[0,1,1,2,3,4]</p></blockquote><p>不知道为什么多出来了个 1，<strong>忽略</strong>调用 <code>erase</code> 删除元素之后，后面元素的下标也会跟着改变</p><p>当一个数重复出现奇数次的时候，就会保留两个</p><p>所以这里需要对 <code>nums[i] == nums[i - 1]</code> 再次判断</p><p>下面修改后的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> nums.<span class="built_in">size</span>(); <span class="comment">// 一个数就没必要继续</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums.<span class="built_in">erase</span>(nums.<span class="built_in">begin</span>()+i);</span><br><span class="line">                --i; <span class="comment">// 删除元素后对 i 进行减 1</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>耗时击败 <code>5%</code>  (╯°□°）╯︵ ┻━┻)</p></blockquote><p>没太注意题目，题目说<strong>不需要考虑数组中超出新长度后面的元素。</strong></p><p>所以这里还可以优化，不用删除重复的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[index] != nums[i])&#123;</span><br><span class="line">                nums[++index] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ++index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2、双指针"><a href="#2、双指针" class="headerlink" title="2、双指针"></a>2、双指针</h4><p>双指针方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> q = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (q &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[p] != nums[q]) &#123;</span><br><span class="line">                nums[p + <span class="number">1</span>] = nums[q];</span><br><span class="line">                ++p;</span><br><span class="line">            &#125;</span><br><span class="line">            ++q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1342. 将数字变成 0 的操作次数(简单)</title>
      <link href="/article/17862.html"/>
      <url>/article/17862.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="1342-将数字变成-0-的操作次数"><a href="#1342-将数字变成-0-的操作次数" class="headerlink" title="1342. 将数字变成 0 的操作次数"></a><a href="https://leetcode.cn/problems/number-of-steps-to-reduce-a-number-to-zero/">1342. 将数字变成 0 的操作次数</a></h4><p>给你一个非负整数 <code>num</code> ，请你返回将它变成 0 所需要的步数。 如果当前数字是偶数，你需要把它除以 2 ；否则，减去 1 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 14</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">步骤 1) 14 是偶数，除以 2 得到 7 。</span><br><span class="line">步骤 2） 7 是奇数，减 1 得到 6 。</span><br><span class="line">步骤 3） 6 是偶数，除以 2 得到 3 。</span><br><span class="line">步骤 4） 3 是奇数，减 1 得到 2 。</span><br><span class="line">步骤 5） 2 是偶数，除以 2 得到 1 。</span><br><span class="line">步骤 6） 1 是奇数，减 1 得到 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 8</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">步骤 1） 8 是偶数，除以 2 得到 4 。</span><br><span class="line">步骤 2） 4 是偶数，除以 2 得到 2 。</span><br><span class="line">步骤 3） 2 是偶数，除以 2 得到 1 。</span><br><span class="line">步骤 4） 1 是奇数，减 1 得到 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 123</span><br><span class="line">输出：12</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= num &lt;= 10^6</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h4><p>使用递归方法，不知道为什么明明 <code>执行代码</code> 的输出结果是对的，<code>提交</code>之后输出结果就是错的</p><p><img src="https://s1.vika.cn/space/2023/01/22/765151237d094485a9f1ba91dab9245c"></p><p>错误原因是因为使用了一个不该使用的 <code>static</code> ，使用静态变量，力扣大概会对这个类的方法重复使用<br>比如说</p><p><img src="https://s1.vika.cn/space/2023/01/22/7289a24e81bb44f682d09fb164feb4f1"></p><p>所以这里不能使用 <code>static</code>关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSteps</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> sum;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            num /= <span class="number">2</span>;++sum;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">numberOfSteps</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            num -= <span class="number">1</span>;++sum;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">numberOfSteps</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h4><p>对于有 <code>除 2</code> 相关的操作，我们可以使用 <code>位运算</code> 来加快执行用时，用 <code>while</code> 来做判断依据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSteps</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> --num;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于一些简单问题，可以先进行解题，然后再在其基础上进行优化<br>如二维优化一维、是否可以在已给数据上进行操作、是否可以用逆向、是否可以用递归或者位运算等等</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>383. 赎金信(简单)</title>
      <link href="/article/51782.html"/>
      <url>/article/51782.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a><a href="https://leetcode.cn/problems/ransom-note/">383. 赎金信</a></h4><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li><li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>先对后面的字符串进行挨个计数，把每一个出现的字母所对应的位置进行递增操作</p><p>再对第一个字符串进行遍历，出现一个字符就对数组中的这个计数进行递减操作</p><p>当出现数组中的计数出现负数的时候，就说明第一个字符串包含的单个字母的个数较多，第二个字符串内的字符无法组成第一个字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ransomNote.<span class="built_in">size</span>() &gt; magazine.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : magazine) v[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : ransomNote) &#123;</span><br><span class="line">            v[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (v[c - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>412. Fizz Buzz(简单)</title>
      <link href="/article/5048.html"/>
      <url>/article/5048.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="412-Fizz-Buzz"><a href="#412-Fizz-Buzz" class="headerlink" title="412. Fizz Buzz"></a><a href="https://leetcode.cn/problems/fizz-buzz/">412. Fizz Buzz</a></h4><p>给你一个整数 <code>n</code> ，找出从 <code>1</code> 到 <code>n</code> 各个整数的 Fizz Buzz 表示，并用字符串数组 <code>answer</code>（<strong>下标从 1 开始</strong>）返回结果，其中：</p><ul><li><code>answer[i] == &quot;FizzBuzz&quot;</code> 如果 <code>i</code> 同时是 <code>3</code> 和 <code>5</code> 的倍数。</li><li><code>answer[i] == &quot;Fizz&quot;</code> 如果 <code>i</code> 是 <code>3</code> 的倍数。</li><li><code>answer[i] == &quot;Buzz&quot;</code> 如果 <code>i</code> 是 <code>5</code> 的倍数。</li><li><code>answer[i] == i</code> （以字符串形式）如果上述条件全不满足。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;,&quot;4&quot;,&quot;Buzz&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 15</span><br><span class="line">输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;,&quot;4&quot;,&quot;Buzz&quot;,&quot;Fizz&quot;,&quot;7&quot;,&quot;8&quot;,&quot;Fizz&quot;,&quot;Buzz&quot;,&quot;11&quot;,&quot;Fizz&quot;,&quot;13&quot;,&quot;14&quot;,&quot;FizzBuzz&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">fizzBuzz</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>) v.<span class="built_in">push_back</span>(<span class="string">&quot;FizzBuzz&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) v.<span class="built_in">push_back</span>(<span class="string">&quot;Fizz&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) v.<span class="built_in">push_back</span>(<span class="string">&quot;Buzz&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> v.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>c语言写出来有点麻烦，注意二维数组需要进行指定空间和用 <code>sprintf</code> 函数向数组写入整形字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ** <span class="title function_">fizzBuzz</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">char</span>** answer = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*)*n);</span><br><span class="line">    <span class="type">char</span>* str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">9</span>*n); <span class="comment">// 最长 9n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) answer[i] = &amp;str[<span class="number">9</span>*i]; <span class="comment">// 指定空间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>) <span class="built_in">strcpy</span>(answer[i <span class="number">-1</span>], <span class="string">&quot;FizzBuzz&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) <span class="built_in">strcpy</span>(answer[i - <span class="number">1</span>], <span class="string">&quot;Fizz&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) <span class="built_in">strcpy</span>(answer[i - <span class="number">1</span>], <span class="string">&quot;Buzz&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">sprintf</span>(answer[i - <span class="number">1</span>], <span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = n;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2303. 计算应缴税款总额(简单)</title>
      <link href="/article/50305.html"/>
      <url>/article/50305.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="2303-计算应缴税款总额"><a href="#2303-计算应缴税款总额" class="headerlink" title="2303. 计算应缴税款总额"></a><a href="https://leetcode.cn/problems/calculate-amount-paid-in-taxes/">2303. 计算应缴税款总额</a></h4><p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>brackets</code> ，其中 <code>brackets[i] = [upperi, percenti]</code> ，表示第 <code>i</code> 个税级的上限是 <code>upperi</code> ，征收的税率为 <code>percenti</code> 。税级按上限 <strong>从低到高排序</strong>（在满足 <code>0 &lt; i &lt; brackets.length</code> 的前提下，<code>upperi-1 &lt; upperi</code>）。</p><p>税款计算方式如下：</p><ul><li>不超过 <code>upper0</code> 的收入按税率 <code>percent0</code> 缴纳</li><li>接着 <code>upper1 - upper0</code> 的部分按税率 <code>percent1</code> 缴纳</li><li>然后 <code>upper2 - upper1</code> 的部分按税率 <code>percent2</code> 缴纳</li><li>以此类推</li></ul><p>给你一个整数 <code>income</code> 表示你的总收入。返回你需要缴纳的税款总额。与标准答案误差不超 <code>10-5</code> 的结果将被视作正确答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：brackets = [[3,50],[7,10],[12,25]], income = 10</span><br><span class="line">输出：2.65000</span><br><span class="line">解释：</span><br><span class="line">前 $3 的税率为 50% 。需要支付税款 $3 * 50% = $1.50 。</span><br><span class="line">接下来 $7 - $3 = $4 的税率为 10% 。需要支付税款 $4 * 10% = $0.40 。</span><br><span class="line">最后 $10 - $7 = $3 的税率为 25% 。需要支付税款 $3 * 25% = $0.75 。</span><br><span class="line">需要支付的税款总计 $1.50 + $0.40 + $0.75 = $2.65 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：brackets = [[1,0],[4,25],[5,50]], income = 2</span><br><span class="line">输出：0.25000</span><br><span class="line">解释：</span><br><span class="line">前 $1 的税率为 0% 。需要支付税款 $1 * 0% = $0 。</span><br><span class="line">剩下 $1 的税率为 25% 。需要支付税款 $1 * 25% = $0.25 。</span><br><span class="line">需要支付的税款总计 $0 + $0.25 = $0.25 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：brackets = [[2,50]], income = 0</span><br><span class="line">输出：0.00000</span><br><span class="line">解释：</span><br><span class="line">没有收入，无需纳税，需要支付的税款总计 $0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= brackets.length &lt;= 100</code></li><li><code>1 &lt;= upperi &lt;= 1000</code></li><li><code>0 &lt;= percenti &lt;= 100</code></li><li><code>0 &lt;= income &lt;= 1000</code></li><li><code>upperi</code> 按递增顺序排列</li><li><code>upperi</code> 中的所有值 <strong>互不相同</strong></li><li>最后一个税级的上限大于等于 <code>income</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h4><p>不知道这个 <code>income</code> 到底位于这个二维数组的那个区间，所以可以使用比较笨的方法(～￣(OO)￣)ブ（二分好像也可以），直接遍历，每遍历完一遍记录以下当前值的前面一个 <code>税级</code> ，当遇到<code>income</code>不大于<code>税级</code>的时候执行<code>收入</code> - <code>税级</code> * <code>税率</code>，退出循环，否则就是（<code>当前税级</code> - <code>上一个税级</code>） * <code>当前税率</code>，并更新最后一个比收益小的税级</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">calculateTax</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; brackets, <span class="type">int</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> tax = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>; <span class="comment">// 最后一个比收益小的税级</span></span><br><span class="line">        <span class="type">int</span> n = brackets.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (income &lt;= brackets[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                tax += (income - x) * brackets[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tax += (brackets[i][<span class="number">0</span>] - x) * brackets[i][<span class="number">1</span>];</span><br><span class="line">                x = brackets[i][<span class="number">0</span>]; <span class="comment">// 更新前一个税级</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tax / <span class="number">100.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2299. 强密码检验器 II(简单)</title>
      <link href="/article/20129.html"/>
      <url>/article/20129.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="2299-强密码检验器-II"><a href="#2299-强密码检验器-II" class="headerlink" title="2299. 强密码检验器 II"></a><a href="https://leetcode.cn/problems/strong-password-checker-ii/">2299. 强密码检验器 II</a></h4><p>如果一个密码满足以下所有条件，我们称它是一个 <strong>强</strong> 密码：</p><ul><li>它有至少 <code>8</code> 个字符。</li><li>至少包含 <strong>一个小写英文</strong> 字母。</li><li>至少包含 <strong>一个大写英文</strong> 字母。</li><li>至少包含 <strong>一个数字</strong> 。</li><li>至少包含 <strong>一个特殊字符</strong> 。特殊字符为：<code>&quot;!@#$%^&amp;*()-+&quot;</code> 中的一个。</li><li>它 <strong>不</strong> 包含 <code>2</code> 个连续相同的字符（比方说 <code>&quot;aab&quot;</code> 不符合该条件，但是 <code>&quot;aba&quot;</code> 符合该条件）。</li></ul><p>给你一个字符串 <code>password</code> ，如果它是一个 <strong>强</strong> 密码，返回 <code>true</code>，否则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：password = &quot;IloveLe3tcode!&quot;</span><br><span class="line">&gt;输出：true</span><br><span class="line">&gt;解释：密码满足所有的要求，所以我们返回 true 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：password = &quot;Me+You--IsMyDream&quot;</span><br><span class="line">&gt;输出：false</span><br><span class="line">&gt;解释：密码不包含数字，且包含 2 个连续相同的字符。所以我们返回 false 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：password = &quot;1aB!&quot;</span><br><span class="line">&gt;输出：false</span><br><span class="line">&gt;解释：密码不符合长度要求。所以我们返回 false 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= password.length &lt;= 100</code></li><li><code>password</code> 包含字母，数字和 <code>&quot;!@#$%^&amp;*()-+&quot;</code> 这些特殊字符。</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>题目较为简单，题目中的密码要求也很有意思，特殊字符正好是键盘上数字那一排，由于对 ASCII 码不太熟悉，我以为会有什么规律，结果规律并不明显</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">! 33</span><br><span class="line">@ 64</span><br><span class="line"><span class="params">#</span> 35</span><br><span class="line"><span class="built_in">$</span> 36</span><br><span class="line"><span class="comment">% 37</span></span><br><span class="line"><span class="built_in">^</span> 94</span><br><span class="line"><span class="built_in">&amp;</span> 38</span><br><span class="line">* 42</span><br><span class="line">( 40</span><br><span class="line">) 41</span><br><span class="line">- 45</span><br><span class="line">+ 43</span><br></pre></td></tr></table></figure><p>于是就干脆使用 <code>switch</code> 进行选择了</p><p>以下是我第一次做的时候的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">strongPasswordCheckerII</span><span class="params">(string password)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = password.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">8</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 至少包含一个，反面一个都没有</span></span><br><span class="line">        <span class="type">short</span> daxie = <span class="number">0</span>;</span><br><span class="line">        <span class="type">short</span> xiaoxie = <span class="number">0</span>;</span><br><span class="line">        <span class="type">short</span> shuzi = <span class="number">0</span>;</span><br><span class="line">        <span class="type">short</span> teshu = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> length = len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; password[i] == password[i - <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (password[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; password[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                daxie++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (password[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; password[i] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                xiaoxie++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (password[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; password[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                shuzi++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (password[i]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;@&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                teshu++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (daxie != <span class="number">0</span> &amp;&amp; xiaoxie != <span class="number">0</span> &amp;&amp; teshu != <span class="number">0</span> &amp;&amp; shuzi != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不得不说写的很繁琐，但运行是过了，不知道为什么耗时 0ms ，应该是卡了吧(ToT)&#x2F;~~~</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 快捷键</title>
      <link href="/article/41636.html"/>
      <url>/article/41636.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>记载常用的即可（又不常用的(～￣▽￣)～</p></blockquote><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li><p>新建：<code>ctrl</code>+<code>N</code></p></li><li><p>新建窗口：<code>ctrl</code>+<code>shift</code>+<code>N</code></p></li><li><p>打开：<code>ctrl</code>+<code>O</code>（以文件的形式）</p></li><li><p>快速打开：<code>ctrl</code>+<code>P</code>（当前目录下的所有 <code>.md</code> 文件快速打开）</p></li><li><p>另存为：<code>ctrl</code>+<code>shift</code>+<code>S</code></p></li><li><p>关闭：<code>ctrl</code>+<code>W</code></p></li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ul><li>标题：<code>ctrl</code>+<code>1/2/3/4/5/6</code></li><li>表格：<code>ctrl</code>+<code>T</code></li><li>代码块：<code>ctrl</code>+<code>shift</code>+<code>K</code></li><li>代码：<code>ctrl</code>+<code>shift</code>+ &#96;</li><li>公式快：<code>ctrl</code>+<code>shift</code>+<code>M</code></li><li>引用：<code>ctrl</code>+<code>shift</code>+<code>Q</code></li><li>有序列表：<code>ctrl</code>+<code>shift</code>+<code>[</code>(还是 - 更方便</li><li>有序列表：<code>ctrl</code>+<code>shift</code>+<code>]</code></li><li>增加缩进：<code>ctrl</code>+<code>]</code></li><li>减少缩进：<code>ctrl</code>+<code>[</code></li><li>加粗：<code>ctrl</code>+<code>B</code></li><li>斜体：<code>ctrl</code>+<code>I</code></li><li>下划线：<code>ctrl</code>+<code>U</code></li><li>超链接：<code>ctrl</code>+<code>K</code></li><li>图像：<code>ctrl</code>+<code>shift</code>+<code>I</code></li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li>侧边栏隐藏：<code>ctrl</code>+<code>shift</code>+<code>L</code></li><li>大纲视图：<code>ctrl</code>+<code>shift</code>+<code>1</code></li><li>文档列表视图：<code>ctrl</code>+<code>shift</code>+<code>2</code></li><li>文件树视图：<code>ctrl</code>+<code>shift</code>+<code>3</code></li><li>源代码模式：<code>ctrl</code>+<code>/</code></li><li>专注模式：<code>F8</code></li><li>打字机模式：<code>F9</code></li><li>切换全屏：<code>F11</code></li><li>实际大小：<code>ctrl</code>+<code>shift</code>+<code>0</code></li><li>放大：<code>ctrl</code>+<code>shift</code>+<code>=</code></li><li>缩小：<code>ctrl</code>+<code>shift</code>+<code>-</code></li><li>应用内打开窗口：<code>ctrl</code>+<code>Tab</code></li><li>打开DevTools：<code>shift</code>+<code>F12</code></li></ul><p>外加一点外</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 带 &#123;<span class="comment">% u 下划线 %&#125; 的文本</span></span><br><span class="line">2. 带 &#123;<span class="comment">% emp 着重号 %&#125; 的文本</span></span><br><span class="line">3. 带 &#123;<span class="comment">% wavy 波浪线 %&#125; 的文本</span></span><br><span class="line">4. 带 &#123;<span class="comment">% del 删除线 %&#125; 的文本</span></span><br><span class="line">5. 键盘样式的文本 &#123;<span class="comment">% kbd command %&#125; + &#123;% kbd D %&#125;</span></span><br><span class="line">6. 密码样式的文本：&#123;<span class="comment">% psw 这里没有验证码 %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1828. 统计一个圆中点的数目(中等)</title>
      <link href="/article/62886.html"/>
      <url>/article/62886.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="1828-统计一个圆中点的数目"><a href="#1828-统计一个圆中点的数目" class="headerlink" title="1828. 统计一个圆中点的数目"></a><a href="https://leetcode.cn/problems/queries-on-number-of-points-inside-a-circle/">1828. 统计一个圆中点的数目</a></h4><p>给你一个数组 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> ，表示第 <code>i</code> 个点在二维平面上的坐标。多个点可能会有 <strong>相同</strong> 的坐标。</p><p>同时给你一个数组 <code>queries</code> ，其中 <code>queries[j] = [xj, yj, rj]</code> ，表示一个圆心在 <code>(xj, yj)</code> 且半径为 <code>rj</code> 的圆。</p><p>对于每一个查询 <code>queries[j]</code> ，计算在第 <code>j</code> 个圆 <strong>内</strong> 点的数目。如果一个点在圆的 <strong>边界上</strong> ，我们同样认为它在圆 <strong>内</strong> 。</p><p>请你返回一个数组 <code>answer</code> ，其中 <code>answer[j]</code>是第 <code>j</code> 个查询的答案。</p><p><strong>示例 1：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/24/7c88d3e774f440cfafd380268b8a3412"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]</span><br><span class="line">输出：[3,2,2]</span><br><span class="line">解释：所有的点和圆如上图所示。</span><br><span class="line">queries[0] 是绿色的圆，queries[1] 是红色的圆，queries[2] 是蓝色的圆。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/24/36017765b325402780eb95c6aa9d3d43"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]</span><br><span class="line">输出：[2,3,2,4]</span><br><span class="line">解释：所有的点和圆如上图所示。</span><br><span class="line">queries[0] 是绿色的圆，queries[1] 是红色的圆，queries[2] 是蓝色的圆，queries[3] 是紫色的圆。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= points.length &lt;= 500</code></li><li><code>points[i].length == 2</code></li><li><code>0 &lt;= xi, yi &lt;= 500</code></li><li><code>1 &lt;= queries.length &lt;= 500</code></li><li><code>queries[j].length == 3</code></li><li><code>0 &lt;= xj, yj &lt;= 500</code></li><li><code>1 &lt;= rj &lt;= 500</code></li><li>所有的坐标都是整数。</li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>点在圆内的公式 <code>(x1 - x2)^2 - (y1 - y2)^2 &lt; r^2</code> ，注意题目说在<code>圆上</code>也算</p><p>循环圆的个数，在当前圆内对每一个点进行判断即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判定一个圆内有几个点（包括圆上），points代表点（x1，y1），queries代表圆（x2，y2，半径）</span></span><br><span class="line">        <span class="comment">// 创建一个数组容器</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; retV; <span class="comment">// 创建一个圆的数量的大小的容器</span></span><br><span class="line">        <span class="comment">// (x1 - x2)^2 + (y1 - y2)^2 &lt; r^2 点在圆内公式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; querie : queries) &#123;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">0</span>; <span class="comment">// 在圆内的个数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; point : points) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">pow</span>(point[<span class="number">0</span>] - querie[<span class="number">0</span>], <span class="number">2</span>) + <span class="built_in">pow</span>(point[<span class="number">1</span>] - querie[<span class="number">1</span>], <span class="number">2</span>) &lt;= <span class="built_in">pow</span>(querie[<span class="number">2</span>], <span class="number">2</span>)) &#123;</span><br><span class="line">                    ++num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            retV.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 端口22失败问题</title>
      <link href="/article/24454.html"/>
      <url>/article/24454.html</url>
      
        <content type="html"><![CDATA[<h3 id="解决报错问题"><a href="#解决报错问题" class="headerlink" title="解决报错问题"></a>解决报错问题</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><ul><li>打开 windows 防火墙，高级设置</li><li>新建入站规则</li><li>选择端口</li><li>新建特定端口，写入 22</li><li>之后保存</li></ul><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>使用的网络有问题，使用别的网络试一下</p><blockquote><p>这个问题困扰了我很长时间，每次再用 git 进行提交的时候总是显示没有权限，和端口请求失败，以至于想放弃使用 ssh，其实也可以使用 https 的方式去推送和拉取代码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1824. 最少侧跳次数(中等)</title>
      <link href="/article/35387.html"/>
      <url>/article/35387.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="1824-最少侧跳次数"><a href="#1824-最少侧跳次数" class="headerlink" title="1824. 最少侧跳次数"></a><a href="https://leetcode.cn/problems/minimum-sideway-jumps/">1824. 最少侧跳次数</a></h4><p>给你一个长度为 <code>n</code> 的 <strong>3 跑道道路</strong> ，它总共包含 <code>n + 1</code> 个 <strong>点</strong> ，编号为 <code>0</code> 到 <code>n</code> 。一只青蛙从 <code>0</code> 号点第二条跑道 <strong>出发</strong> ，它想要跳到点 <code>n</code> 处。然而道路上可能有一些障碍。</p><p>给你一个长度为 <code>n + 1</code> 的数组 <code>obstacles</code> ，其中 <code>obstacles[i]</code> （<strong>取值范围从 0 到 3</strong>）表示在点 <code>i</code> 处的 <code>obstacles[i]</code> 跑道上有一个障碍。如果 <code>obstacles[i] == 0</code> ，那么点 <code>i</code> 处没有障碍。任何一个点的三条跑道中 <strong>最多有一个</strong> 障碍。</p><ul><li>比方说，如果 <code>obstacles[2] == 1</code> ，那么说明在点 2 处跑道 1 有障碍。</li></ul><p>这只青蛙从点 <code>i</code> 跳到点 <code>i + 1</code> 且跑道不变的前提是点 <code>i + 1</code> 的同一跑道上没有障碍。为了躲避障碍，这只青蛙也可以在 <strong>同一个</strong> 点处 <strong>侧跳</strong> 到 <strong>另外一条</strong> 跑道（这两条跑道可以不相邻），但前提是跳过去的跑道该点处没有障碍。</p><ul><li>比方说，这只青蛙可以从点 3 处的跑道 3 跳到点 3 处的跑道 1 。</li></ul><p>这只青蛙从点 0 处跑道 <code>2</code> 出发，并想到达点 <code>n</code> 处的 <strong>任一跑道</strong> ，请你返回 <strong>最少侧跳次数</strong> 。</p><p><strong>注意</strong>：点 <code>0</code> 处和点 <code>n</code> 处的任一跑道都不会有障碍。</p><p><strong>示例 1：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/21/20b005826e0c4e29b77cb79647877a10"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：obstacles = [0,1,2,3,0]</span><br><span class="line">&gt;输出：2 </span><br><span class="line">&gt;解释：最优方案如上图箭头所示。总共有 2 次侧跳（红色箭头）。</span><br><span class="line">&gt;注意，这只青蛙只有当侧跳时才可以跳过障碍（如上图点 2 处所示）。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/21/0594d03b044a44978080ad1f167632fa"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：obstacles = [0,1,1,3,3,0]</span><br><span class="line">&gt;输出：0</span><br><span class="line">&gt;解释：跑道 2 没有任何障碍，所以不需要任何侧跳。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://s1.vika.cn/space/2023/01/24/400cda6b390a473898e8d6584367d6dc"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：obstacles = [0,2,1,0,3,0]</span><br><span class="line">&gt;输出：2</span><br><span class="line">&gt;解释：最优方案如上图所示。总共有 2 次侧跳。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>obstacles.length == n + 1</code></li><li><code>1 &lt;= n &lt;= 5 * 105</code></li><li><code>0 &lt;= obstacles[i] &lt;= 3</code></li><li><code>obstacles[0] == obstacles[n] == 0</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSideJumps</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; obstacles)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录数组长度</span></span><br><span class="line">        <span class="type">int</span> n = obstacles.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="comment">// 方便寻找没有障碍的跑道</span></span><br><span class="line">        <span class="type">int</span> way[<span class="number">3</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>&#125; , &#123;<span class="number">0</span>, <span class="number">1</span>&#125; &#125;;</span><br><span class="line">        <span class="comment">// 当前路线到零一路线最少次数</span></span><br><span class="line">        <span class="type">int</span> f[<span class="number">3</span>];</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>; f[<span class="number">1</span>] = <span class="number">0</span>; f[<span class="number">2</span>] = <span class="number">1</span>; <span class="comment">// 默认在中间一排</span></span><br><span class="line">        <span class="comment">// one、two 表示没有阻碍的两条跑道</span></span><br><span class="line">        <span class="comment">// w 表示有障碍的道路</span></span><br><span class="line">        <span class="type">int</span> one = <span class="number">0</span>, two = <span class="number">1</span>, w = <span class="number">2</span>; <span class="comment">// 随意初始化</span></span><br><span class="line">        <span class="comment">// 从 1 开始遍历 obstacles</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 没有障碍</span></span><br><span class="line">            <span class="keyword">if</span> (obstacles[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 使用上一次的数据更新之前有障碍的跑道</span></span><br><span class="line">                f[w] = <span class="built_in">min</span>(f[one], f[two]) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            w = obstacles[i] - <span class="number">1</span>;</span><br><span class="line">            f[w] = INF;</span><br><span class="line">            one = way[w][<span class="number">0</span>];</span><br><span class="line">            two = way[w][<span class="number">1</span>];</span><br><span class="line">            f[one] = <span class="built_in">min</span>(f[one], f[two] + <span class="number">1</span>);</span><br><span class="line">            f[two] = <span class="built_in">min</span>(f[one] + <span class="number">1</span>, f[two]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(f[<span class="number">0</span>], f[<span class="number">1</span>]), f[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vika + PicGo 图床搭建</title>
      <link href="/article/38401.html"/>
      <url>/article/38401.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>原先使用 GitHub + PicGo 的方式搭建图床，显示效果不好，一张<code>几百kb</code>的照片需要加载四五秒，由于开了<code>图片懒加载</code>所以没显示图片的这个期间，图片哪里就是空白的，所以直接弃用 GitHub 搭建图床的方式，选用有国内服务器的 vika，使用起来也比 GitHub 稍微简单一点，最主要的是对于代理是没有要求的，原先使用 GitHub 作图床时，需要关闭代理，否则上传只会失败，而我使用<code>git</code>又需要代理，开来开去好麻烦(￣﹏￣；)</p></blockquote><h3 id="注册-vika"><a href="#注册-vika" class="headerlink" title="注册 vika"></a>注册 vika</h3><ul><li>vika 链接：<a href="https://vika.cn/?inviteCode=55298644">https://vika.cn/?inviteCode=55298644</a></li></ul><p>注册进入后，点击左侧<code>控制台</code>，进入<code>工作目录</code>，点击加号<code>新建空白维格表</code></p><p><img src="https://s1.vika.cn/space/2023/01/20/06b019592367402980543c0757e38153"></p><p>点击左下角头像选择<code>个人设置</code>，进入<code>开发者配置</code></p><p><img src="https://s1.vika.cn/space/2023/01/20/4d8ea1774afc44d4a7ca186d966757e4"></p><p>第一次进去是一个加号，点击加号，会进行绑定邮箱操作，绑定之后，回到刚刚新建表格<br>找到 <code>API</code></p><p><img src="https://s1.vika.cn/space/2023/01/20/04f748db40a74f2188e98476ba373093"></p><p>进入 <code>API</code> 选项，点击<code>Get 获取</code>，复制下面<code>datasheets</code>后面两个<code>/</code>之间的一串字母，这个是 <code>维格表ID</code>，再复制<code>Bearer</code>后面的一串字符，这个是<code>token</code>，后期也可以在开发者配置中去复制</p><p><img src="https://s1.vika.cn/space/2023/01/20/ae6cf011306147888ad37beb8e983d6e"></p><h3 id="PicGo-下载"><a href="#PicGo-下载" class="headerlink" title="PicGo 下载"></a>PicGo 下载</h3><ul><li><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo (github.com)</a></li></ul><p>PicGo 需要插件才支持 vika，到<code>插件设置</code>去下载</p><p><img src="https://s1.vika.cn/space/2023/01/20/019b076bed284de7aedcc040245c610d"></p><p>记得在<code>PicGo设置中打开</code>vika</p><p><img src="https://s1.vika.cn/space/2023/01/20/b8329cbb977540b69025de75ea600610"></p><p>在图床设置中打开<code>vika维格表</code></p><ol><li>API Token 填写上面复制的 token 即可</li><li><code>维格表ID</code>填写上面复制的<code>datasheets</code>后面的内容</li></ol><p>其余内容可以默认，最后别忘了点击确定</p><p>此时就可以在<code>上传区</code>上传图片</p><h3 id="PicGo-搭配-Typora-使用"><a href="#PicGo-搭配-Typora-使用" class="headerlink" title="PicGo 搭配 Typora 使用"></a>PicGo 搭配 Typora 使用</h3><p>Typora 网盘链接：</p><ul><li>链接：<a href="https://pan.baidu.com/s/1gVErYFgH7OROigXSAy_CPw?pwd=n4bc">https://pan.baidu.com/s/1gVErYFgH7OROigXSAy_CPw?pwd=n4bc</a><br>提取码：n4bc<br>解压码：3215</li></ul><p>在 Typora 软件中找到<code>文件</code>进入<code>偏好设置</code>点击<code>图像</code></p><p><img src="https://s1.vika.cn/space/2023/01/20/4038340068e545d486911c32bbf54d60"></p><p>插入图片选择<code>上传图片</code>下面的勾选</p><p>上传服务选择<code>PicGo(app)</code>，下面填写他的安装路径即可</p><p>这个时候就可以在 Typora 中粘贴图片的时候，图片自己上传到<code>vika</code>并生成 URL 链接</p><h3 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h3><p>图片的大小会影响其加载速度，所以在保证图片质量的前提下，尽可能的减小图片内存大小</p><p>使用工具</p><ul><li><a href="https://saerasoft.com/caesium/">Caesium - Image Compressor (软件)</a></li><li><a href="https://tinypng.com/">TinyPNG – Compress(网站)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客备份和迁移</title>
      <link href="/article/53348.html"/>
      <url>/article/53348.html</url>
      
        <content type="html"><![CDATA[<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>新建 <code>GitHub</code> 仓库，将本地网站文件通过 <code>git</code> 与 <code>GitHub</code> 相连接</p><p>在本地文件中右键打开 <code>Git Bash Here</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/01/28/d28a14c34f0b448eb82b3b0dbe26dbca"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:用户名/仓库.git</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/01/28/8b5e8e3176bd4dddbd760af283e6f1b2"></p><p><img src="https://s1.vika.cn/space/2023/01/28/32865143513647078b9dfe3a5887cffd"></p><p>在网站文件根目录下新建一个shell脚本，命名为 <code>push.sh</code></p><p>复制一下内容进入脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;\033[32m正在为你备份博客中.........\033[0m&quot;</span><br><span class="line">git add .</span><br><span class="line">echo -e &quot;\033[32m正在为你备份博客中.........\033[0m&quot;</span><br><span class="line">git commit -m &quot;update&quot;</span><br><span class="line">echo -e &quot;\033[32m正在为你备份博客中.........\033[0m&quot;</span><br><span class="line">git push origin master --force</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo -e &quot;\033[31m 备份失败！请检查网络情况！ \033[0m&quot;</span><br><span class="line">else</span><br><span class="line">    echo -e &quot;\033[32m恭喜你！已为你备份到你的GitHub仓库 backup \033[0m&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>在网站文件右键打开 <code>Git Bash Here</code> 输入 <code>./push.sh</code> 即可完成备份</p><p><img src="https://s1.vika.cn/space/2023/01/28/affe345631044801850fa6dfcb70d092"></p><h4 id="两键上传加备份"><a href="#两键上传加备份" class="headerlink" title="两键上传加备份"></a>两键上传加备份</h4><p>在桌面写一个 <code>dp.sh.dat</code> 名字随意，后缀 <code>.bat</code> ，文件写入以下内容</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmd</span> /k &quot;<span class="built_in">cd</span> /d D:\distake\blog&amp;&amp;hexo cl&amp;&amp;hexo g&amp;&amp;gulp&amp;&amp;hexo d&amp;&amp;git add .&amp;&amp;git commit -m &quot;update&quot;&amp;&amp;git push origin master --force&quot;</span><br></pre></td></tr></table></figure><p>&#x2F;k 表示执行结束后不退出控制台，可以化成 &#x2F;c<br>gulp 使用的前提是要有 gulp 包，并且添加一个 js 脚本，用于压缩文件</p><p>安装 gulp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp-minify-html gulp-minify-css gulp-uglify gulp-imagemin --save</span><br></pre></td></tr></table></figure><p>根目录下建立 <code>gulpfile.js</code> 文件，写入以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="comment">//Plugins模块获取</span></span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="comment">//压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩js 不压缩min.js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task(&#x27;default&#x27;, [</span></span><br><span class="line"><span class="comment">//  &#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"><span class="comment">//4.0以后的写法</span></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><h4 id="第一步：安装-Hexo-环境-x2F-工具"><a href="#第一步：安装-Hexo-环境-x2F-工具" class="headerlink" title="第一步：安装 Hexo 环境 &#x2F; 工具"></a>第一步：安装 Hexo 环境 &#x2F; 工具</h4><ul><li>nodejs：<a href="https://nodejs.org/zh-cn/">Node.js (nodejs.org)</a></li><li>git：<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a> or <a href="https://www.gitclone.com/docs/feature/github_git">提供git(windows)下载 - 网达极客社区 (gitclone.com)</a></li></ul><h4 id="第二步：配置密钥信息"><a href="#第二步：配置密钥信息" class="headerlink" title="第二步：配置密钥信息"></a>第二步：配置密钥信息</h4><p>在本地文件夹中输入以下指令，会生成密钥，需要到 <code>GitHub</code> 设置中去添加密钥（公钥</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br><span class="line">git config --global user.name &quot;英文名字&quot;</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/01/28/e091fb58a1f04ab2af0d0e6e1ac29be2"></p><p>生成公钥的位置，在本地中<img src="https://s1.vika.cn/space/2023/01/28/ca42a034c3714d68a8c9bf212be58177"></p><h4 id="第三步：克隆仓库"><a href="#第三步：克隆仓库" class="headerlink" title="第三步：克隆仓库"></a>第三步：克隆仓库</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:用户名/仓库.git</span><br></pre></td></tr></table></figure><p>对 npm 进行安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/01/28/bad132f760174b4186494dc0618806ce"></p><p>至此，迁移完成</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p><em>博客是一种记录的方式，最后希望这种方式依然长久</em></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1817. 查找用户活跃分钟数(中等)</title>
      <link href="/article/54870.html"/>
      <url>/article/54870.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><h4 id="1817-查找用户活跃分钟数"><a href="#1817-查找用户活跃分钟数" class="headerlink" title="1817. 查找用户活跃分钟数"></a><a href="https://leetcode.cn/problems/finding-the-users-active-minutes/">1817. 查找用户活跃分钟数</a></h4><p>给你用户在 LeetCode 的操作日志，和一个整数 <code>k</code> 。日志用一个二维整数数组 <code>logs</code> 表示，其中每个 <code>logs[i] = [IDi, timei]</code> 表示 ID 为 <code>IDi</code> 的用户在 <code>timei</code> 分钟时执行了某个操作。</p><p><strong>多个用户</strong> 可以同时执行操作，单个用户可以在同一分钟内执行 <strong>多个操作</strong> 。</p><p>指定用户的 <strong>用户活跃分钟数（user active minutes，UAM）</strong> 定义为用户对 LeetCode 执行操作的 <strong>唯一分钟数</strong> 。 即使一分钟内执行多个操作，也只能按一分钟计数。</p><p>请你统计用户活跃分钟数的分布情况，统计结果是一个长度为 <code>k</code> 且 <strong>下标从 1 开始计数</strong> 的数组 <code>answer</code> ，对于每个 <code>j</code>（<code>1 &lt;= j &lt;= k</code>），<code>answer[j]</code> 表示 <strong>用户活跃分钟数</strong> 等于 <code>j</code> 的用户数。</p><p>返回上面描述的答案数组 <code>answer</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5</span><br><span class="line">&gt;输出：[0,2,0,0,0]</span><br><span class="line">&gt;解释：</span><br><span class="line">&gt;ID=0 的用户执行操作的分钟分别是：5 、2 和 5 。因此，该用户的用户活跃分钟数为 2（分钟 5 只计数一次）</span><br><span class="line">&gt;ID=1 的用户执行操作的分钟分别是：2 和 3 。因此，该用户的用户活跃分钟数为 2</span><br><span class="line">&gt;2 个用户的用户活跃分钟数都是 2 ，answer[2] 为 2 ，其余 answer[j] 的值都是 0</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入：logs = [[1,1],[2,2],[2,3]], k = 4</span><br><span class="line">&gt;输出：[1,1,0,0]</span><br><span class="line">&gt;解释：</span><br><span class="line">&gt;ID=1 的用户仅在分钟 1 执行单个操作。因此，该用户的用户活跃分钟数为 1</span><br><span class="line">&gt;ID=2 的用户执行操作的分钟分别是：2 和 3 。因此，该用户的用户活跃分钟数为 2</span><br><span class="line">&gt;1 个用户的用户活跃分钟数是 1 ，1 个用户的用户活跃分钟数是 2 </span><br><span class="line">&gt;因此，answer[1] = 1 ，answer[2] = 1 ，其余的值都是 0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= logs.length &lt;= 104</code></li><li><code>0 &lt;= IDi &lt;= 109</code></li><li><code>1 &lt;= timei &lt;= 105</code></li><li><code>k</code> 的取值范围是 <code>[用户的最大用户活跃分钟数, 105]</code></li></ul></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>这个题刚开始读的时候有点懵(这个难道不是语文阅读吗ಠಿ_ಠ)</p><p>先从输出结果来看<br><code>示例1</code>中<code>[0, 2, 0, 0, 0]</code><br>answer[0] 表示活跃时长为<code>1分钟</code>的人有 0 人<br>answer[1] 表示活跃时长为<code>2分钟</code>的人有 2 人<br>answer[2] 表示活跃时长为<code>3分钟</code>的人有 0 人<br>answer[3] 表示活跃时长为<code>4分钟</code>的人有 0 人<br>answer[4] 表示活跃时长为<code>5分钟</code>的人有 0 人</p><p>这就是题目要求的数组，题目可以用 Hash</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findingUsersActiveMinutes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; logs, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, unordered_set&lt;<span class="type">int</span>&gt;&gt; Minutes;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; log : logs) &#123;</span><br><span class="line">            <span class="type">int</span> i = log[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> time = log[<span class="number">1</span>];</span><br><span class="line">            Minutes[i].<span class="built_in">insert</span>(time);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">answer</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [_, ts] : Minutes) &#123;</span><br><span class="line">            ++answer[ts.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客问题总结</title>
      <link href="/article/50347.html"/>
      <url>/article/50347.html</url>
      
        <content type="html"><![CDATA[<blockquote><ol><li>git 上传问题，每次上传显示没有权限，和端口错误（设置防火墙</li><li>上传文章后，可能第一篇文章无法阅读（应该是文件名不能有空格</li><li>上传操作需要频繁指令，一般三个指令（hexo三连</li><li>git 上传过程中需要进行代理（挂代理≡(▔﹏▔)≡</li><li>git 上传与连接的网络有关（我的热点上传不了(╬▔皿▔)╯，我刚开始以为是<code>GitHub公钥</code>出了问题，重新删了好几次密钥又重新到<code>GitHub</code>填写都没有完全解决解决，治标不治本⊙﹏⊙∥</li><li>博客一迁移，博客时间全部都乱了变成一样的了o_o ….</li></ol></blockquote><ul><li><p>为了网站性能，去掉了所有花里胡哨的的<code>CSS</code>以及<code>JS</code> (╯°□°）╯︵ ┻━┻<br>模糊效果、透明效果、大背景、音乐以及live2D等等，这些固然好看也好玩，但是也<code>好卡</code>o_o ….<br>原先个人 <code>CPU占用率</code> 达 20% 到 30 %，目前处于 10% 以下</p><p>最后为了体验良好，选择白折腾。</p><p>不过对于白天模式和黑夜模式的颜色<code>渐变色</code>以及<code>卡片颜色</code>做了很多修改，看起来也还蛮美观的，就这样吧<br>美化的重点是默认(￣o￣) . z Z</p></li><li><p>以下是部分 CSS 代码，以防以后再想折腾忘记了(＠_＠;)，记得在配置文件中引用</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚与头图透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 白天模式遮罩透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 翻页按钮居中 */</span></span><br><span class="line"><span class="comment">/* #pagination &#123;</span></span><br><span class="line"><span class="comment">    width: 100%;</span></span><br><span class="line"><span class="comment">    margin: auto;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 状态栏居中 */</span></span><br><span class="line"><span class="comment">/* 一级菜单居中 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: fit-content <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子菜单横向展示 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */</span></span><br><span class="line"><span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">125px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 样式 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--trans-light</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.88</span>);</span><br><span class="line">    <span class="comment">/*最后一个数透明值*/</span></span><br><span class="line">    <span class="attr">--trans-dark</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">0.88</span>);</span><br><span class="line">    <span class="attr">--border-style</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">169</span>, <span class="number">169</span>, <span class="number">169</span>);</span><br><span class="line">    <span class="comment">/* --backdrop-filter: blur(5px) saturate(150%); */</span></span><br><span class="line">    <span class="comment">/* 背景过滤器，如blur(5px) saturate(150%)表示饱和度为150%的、高斯模糊半径为5px的过滤器，这是亚克力效果的一种实现方法; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页文章卡片 */</span></span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light);</span><br><span class="line">    <span class="comment">/* backdrop-filter: var(--backdrop-filter); */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--border-style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页侧栏卡片 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light);</span><br><span class="line">    <span class="comment">/* backdrop-filter: var(--backdrop-filter); */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--border-style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章页、归档页、普通页面、分类、标签 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#post</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#page</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#archive</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#categories</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#category</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light);</span><br><span class="line">    <span class="comment">/* backdrop-filter: var(--backdrop-filter); */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--border-style);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导航栏 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.75</span>);</span><br><span class="line">    <span class="comment">/* backdrop-filter: var(--backdrop-filter); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#post</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#archive</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#page</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#category</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-dark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式页脚页头遮罩透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 阅读模式 */</span></span><br><span class="line"><span class="selector-class">.read-mode</span> <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>, <span class="number">204</span>, <span class="number">171</span>, <span class="number">0.5</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.read-mode</span> <span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>, <span class="number">204</span>, <span class="number">171</span>, <span class="number">0.5</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式下的阅读模式 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.read-mode</span> <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">0.9</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e4e4e4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.read-mode</span> <span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">0.9</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e4e4e4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加载条 */</span></span><br><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eaecf2</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace-inactive</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span><span class="selector-class">.pace-inactive</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,</span><br><span class="line">            <span class="built_in">rgb</span>(<span class="number">18</span>, <span class="number">194</span>, <span class="number">233</span>),</span><br><span class="line">            <span class="built_in">rgb</span>(<span class="number">196</span>, <span class="number">113</span>, <span class="number">237</span>),</span><br><span class="line">            <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">79</span>, <span class="number">89</span>));</span><br><span class="line">    <span class="attribute">animation</span>: gradient <span class="number">2s</span> ease infinite;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关注颜色 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-info</span> <span class="selector-id">#card-info-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#96dbc6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* [data-theme=&#x27;dark&#x27;] &#123;</span></span><br><span class="line"><span class="comment">    --card-bg: #5a4646 !important;</span></span><br><span class="line"><span class="comment">    --sidebar-bg: #421f22 !important;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[data-theme=&#x27;light&#x27;] &#123;</span></span><br><span class="line"><span class="comment">    --card-bg: #fff6f6 !important;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">:root &#123;</span></span><br><span class="line"><span class="comment">    --scrollbar-color: #ccada3 !important;</span></span><br><span class="line"><span class="comment">    --btn-bg: #c6a99f !important;</span></span><br><span class="line"><span class="comment">    --sidebar-bg: #ffebeb;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 样式 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--trans-light</span>: <span class="built_in">rgb</span>(<span class="number">255</span> <span class="number">255</span> <span class="number">255</span> / <span class="number">0%</span>);</span><br><span class="line">    <span class="comment">/*最后一个数透明值*/</span></span><br><span class="line">    <span class="comment">/* --trans-dark: rgba(25, 25, 25, 0.88); */</span></span><br><span class="line">    <span class="comment">/* --border-style: 1px solid rgb(169, 169, 169); */</span></span><br><span class="line">    <span class="comment">/* --backdrop-filter: blur(5px) saturate(150%); */</span></span><br><span class="line">    <span class="comment">/* 背景过滤器，如blur(5px) saturate(150%)表示饱和度为150%的、高斯模糊半径为5px的过滤器，这是亚克力效果的一种实现方法; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页文章卡片 */</span></span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light) <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* backdrop-filter: var(--backdrop-filter); */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">35px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* border: var(--border-style); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页侧栏卡片 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light) <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* backdrop-filter: var(--backdrop-filter); */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">35px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* border: var(--border-style); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章页、归档页、普通页面、分类、标签 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#post</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#page</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#archive</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#categories</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#category</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--trans-light) <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* backdrop-filter: var(--backdrop-filter); */</span></span><br><span class="line">    <span class="comment">/* border: var(--border-style); */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">35px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导航栏 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* backdrop-filter: var(--backdrop-filter); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* [data-theme=&quot;dark&quot;] #page-header.nav-fixed #nav &#123;</span></span><br><span class="line"><span class="comment">    background: rgba(0, 0, 0, 0.7) !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩 */</span></span><br><span class="line"><span class="comment">/* [data-theme=&quot;dark&quot;] #recent-posts&gt;.recent-post-item,</span></span><br><span class="line"><span class="comment">[data-theme=&quot;dark&quot;] #aside-content .card-widget,</span></span><br><span class="line"><span class="comment">[data-theme=&quot;dark&quot;] div#post,</span></span><br><span class="line"><span class="comment">[data-theme=&quot;dark&quot;] div#archive,</span></span><br><span class="line"><span class="comment">[data-theme=&quot;dark&quot;] div#page,</span></span><br><span class="line"><span class="comment">[data-theme=&quot;dark&quot;] div#category,</span></span><br><span class="line"><span class="comment">[data-theme=&quot;dark&quot;] div#tag &#123;</span></span><br><span class="line"><span class="comment">    background: var(--trans-dark);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页脚与头图透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* #page-header &#123;</span></span><br><span class="line"><span class="comment">    background: transparent !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 白天模式遮罩透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* #page-header::before &#123;</span></span><br><span class="line"><span class="comment">    background: transparent !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩透明 */</span></span><br><span class="line"><span class="comment">/* [data-theme=&quot;dark&quot;] #footer::before &#123;</span></span><br><span class="line"><span class="comment">    background: transparent !important;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[data-theme=&quot;dark&quot;] #page-header::before &#123;</span></span><br><span class="line"><span class="comment">    background: transparent !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 右侧功能键 */</span></span><br><span class="line"><span class="selector-id">#rightside</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#rightside</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f500</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="comment">/* 滑动条颜色 */</span></span><br><span class="line">    <span class="comment">/* --scrollbar-color: #15161600 !important; */</span></span><br><span class="line">    <span class="comment">/* 字体颜色 */</span></span><br><span class="line">    <span class="attr">--font-color</span>: <span class="number">#000000</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* 引用颜色 */</span></span><br><span class="line">    <span class="attr">--blockquote-color</span>: <span class="number">#000000</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* 引用背景颜色 */</span></span><br><span class="line">    <span class="attr">--blockquote-bg</span>: <span class="built_in">rgb</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> / <span class="number">10%</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* 搜索的标题颜色 */</span></span><br><span class="line">    <span class="attr">--search-result-title</span>: <span class="number">#ffffff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* 手机版侧边栏颜色 */</span></span><br><span class="line">    <span class="attr">--sidebar-bg</span>: <span class="number">#a7a2a18f</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="comment">/* 按钮按下去颜色 */</span></span><br><span class="line">    <span class="attr">--btn-hover-color</span>: <span class="number">#bdc1dc</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 状态栏居中 */</span></span><br><span class="line"><span class="comment">/* 一级菜单居中 */</span></span><br><span class="line"><span class="comment">/* #nav .menus_items &#123;</span></span><br><span class="line"><span class="comment">    position: absolute !important;</span></span><br><span class="line"><span class="comment">    width: fit-content !important;</span></span><br><span class="line"><span class="comment">    left: 50% !important;</span></span><br><span class="line"><span class="comment">    transform: translateX(-50%) !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子菜单横向展示 */</span></span><br><span class="line"><span class="comment">/* #nav .menus_items .menus_item:hover .menus_item_child &#123;</span></span><br><span class="line"><span class="comment">    display: flex !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章框大小 */</span></span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">11em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 搜索颜色 */</span></span><br><span class="line"><span class="selector-class">.search-dialog</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a5999975</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单行代码颜色 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#9f0000</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">90</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span>,</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.not-top-img</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">255</span> <span class="number">255</span> <span class="number">255</span> / <span class="number">0%</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: filter <span class="number">375ms</span> ease-in .<span class="number">2s</span>, transform <span class="number">1s</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按钮颜色 */</span></span><br><span class="line"><span class="selector-id">#pagination</span> <span class="selector-class">.page-number</span><span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#b3c8de</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 搜索到的字的颜色 */</span></span><br><span class="line"><span class="selector-id">#local-search</span> <span class="selector-class">.search-dialog</span> <span class="selector-class">.local-search__hit-item</span> <span class="selector-class">.search-keyword</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4fd4f1</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加载条 */</span></span><br><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eaecf2</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace-inactive</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span><span class="selector-class">.pace-inactive</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,</span><br><span class="line">            <span class="built_in">rgb</span>(<span class="number">18</span>, <span class="number">194</span>, <span class="number">233</span>),</span><br><span class="line">            <span class="built_in">rgb</span>(<span class="number">196</span>, <span class="number">113</span>, <span class="number">237</span>),</span><br><span class="line">            <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">79</span>, <span class="number">89</span>));</span><br><span class="line">    <span class="attribute">animation</span>: gradient <span class="number">2s</span> ease infinite;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 网站名的阴影 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-name</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用方法</title>
      <link href="/article/46371.html"/>
      <url>/article/46371.html</url>
      
        <content type="html"><![CDATA[<h3 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h3><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期 2022-12-12</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>sticky</td><td>填写数字，表示置顶</td></tr></tbody></table><h3 id="文章推送"><a href="#文章推送" class="headerlink" title="文章推送"></a>文章推送</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>脚本一行命令部署，根目录下新建 <code>dp.sh</code> 文件，写入以下内容，以后只需要在输入 <code>./dp.sh</code> 即可完成部署加备份，hhh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;\033[32mclear.........\033[0m&quot;</span><br><span class="line">hexo cl</span><br><span class="line">echo -e &quot;\033[32mgenerate.........\033[0m&quot;</span><br><span class="line">hexo g</span><br><span class="line">echo -e &quot;\033[32mgulp.........\033[0m&quot;</span><br><span class="line">gulp</span><br><span class="line">echo -e &quot;\033[32mdeploy.........\033[0m&quot;</span><br><span class="line">hexo d</span><br><span class="line">echo -e &quot;\033[32backup.........\033[0m&quot;</span><br><span class="line">./push.sh</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo -e &quot;\033[31m fail,check your net \033[0m&quot;</span><br><span class="line">else</span><br><span class="line">    echo -e &quot;\033[32msuccess deploy and backup\033[0m&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>备份推送（有相关脚本以及仓库情况下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./push.sh</span><br></pre></td></tr></table></figure><h3 id="文章标签外挂"><a href="#文章标签外挂" class="headerlink" title="文章标签外挂"></a>文章标签外挂</h3><blockquote><p>以下内容仅 <code>butterfly</code> 主题支持，非必要不使用</p></blockquote><h4 id="折叠栏（Toggle）"><a href="#折叠栏（Toggle）" class="headerlink" title="折叠栏（Toggle）"></a>折叠栏（Toggle）</h4><ul><li>代码</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle 点击打开 %&#125;</span><br><span class="line"></span><br><span class="line">这里可以写内容</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><ul><li>预览</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle 点击打开 %&#125;</span><br><span class="line"></span><br><span class="line">这里可以写内容</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><h4 id="选择卡（Tabs）"><a href="#选择卡（Tabs）" class="headerlink" title="选择卡（Tabs）"></a>选择卡（Tabs）</h4><ul><li>代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 样例 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 内容1 --&gt;</span><br><span class="line">这里可以写内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 内容2 --&gt;</span><br><span class="line">这里可以写内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><ul><li>预览</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 样例 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 内容1 --&gt;这里可以写内容&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 内容2 --&gt;这里可以写内容&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>失误</title>
      <link href="/article/1f25a47c.html"/>
      <url>/article/1f25a47c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>2023年 2 月 25 日 晚 18:00~21:00</p></blockquote><p>记录记一次失误，事情说大也不大，说小也不小。</p><p>实验室招人，我秉着势在必得的心态去计测了，题目大概中等水平，前面的题很难，后面的就稍微简单一些，十道题左右，我完全有把握的有四道，其他的不是很确定。这次报名人数很多，但是实际去计测的人没有多少，一个机房也就近十个人，还有一个机房，不清楚人数，应该也不多，本来想着能做出几道题就差不多了，应该能通过的，考完之后感觉信心十足。然而乌龙出现了，晚上想一道题的时候，想着想着，发现我犯了一个致命的错误，语言类型没换，默认 C，我用到 C++，这就意味着编译都通过不了，越想越气，一晚上没睡好，辗转反侧。</p><p>既然写到这里的，也有必要总结一下这次的经历与教训，其实没换语言只是失误之一。做题的时候心情太浮躁了，第一道题叫开心数，把我难住了，考的好像是贪心问题，我旁边坐着我的同班同学，是我班的学委，平时也和我玩的比较好，我听着他在键盘上劈里啪啦敲着，我开始慌乱了，不知过了多久这个题我还是没有好头绪，我就放弃了。开始下一题，第二题叫朋友圈，在草稿纸上研究也许久，也没有具体思路，然后我开始做第三题，第三题叫完美矩阵，这个题我觉得有思路，开始动手了，经过大概半小时的推敲，然后开始调试和测试，案例都通过之后交了上去，开始下一题，后面的题名字比较怪也不太记得了，我依稀记得我后面有把握的写出来了三题，中间的时候，我看了看同学写的，我看他调试出错了，然后不想写了，就直接交上去了，我说：“题好难啊”，“对呀，我一道都不会写”他这么回答的，我又问道：“那你写那么多”，“好多都是不对，乱写了”他笑着说，我看了看他写的代码，好像确实那么回事，我也笑了，然后开始觉得无所谓了，随便写了，精神也没有那么绷紧，期间他还问我了一些题目问题，我也是佩服自己居然还有时间给他讲，后面来了一道简单题，最后一题了，大概只剩下十分钟了，然后时间正好的差了一分钟左右，没交上。</p><p>有时候没有分清楚场合，也许把闲聊、沟通的时间多用在检查上面，没准就能找到很多 bug 所在，尤其是语言选择。</p><p>这次进实验室是没希望了，下次不知道是什么时候，也许也没有下一次了，但我会以我的方式学下去，即使身边没有同行的人。</p><p>愿我依能积极乐观的面对一切（摆ㄟ( ▔——▔ )ㄏ）。</p><blockquote><p>纪一次似大非大的失误</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
